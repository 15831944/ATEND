//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Atend.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsSagAndTension")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsSagAndTension : global::System.Data.DataSet {
        
        private TitleDataTable tableTitle;
        
        private SagAndTensionDataTable tableSagAndTension;
        
        private PoleForceDataTable tablePoleForce;
        
        private NodeDataTable tableNode;
        
        private BranchDataTable tableBranch;
        
        private CrossSectionDataTable tableCrossSection;
        
        private InputInfoTranseDataTable tableInputInfoTranse;
        
        private LoadCurrentDataTable tableLoadCurrent;
        
        private LoadPowerDataTable tableLoadPower;
        
        private LoadBranchDataTable tableLoadBranch;
        
        private RemarkDataTable tableRemark;
        
        private RudSurfaceDataTable tableRudSurface;
        
        private PoleWithHalterDataTable tablePoleWithHalter;
        
        private PoleWithOutHalterDataTable tablePoleWithOutHalter;
        
        private StatusReportDataTable tableStatusReport;
        
        private AirPostDiagramDataTable tableAirPostDiagram;
        
        private GroundPostDiagramDataTable tableGroundPostDiagram;
        
        private ConsolDiagramDataTable tableConsolDiagram;
        
        private ContentDataTable tableContent;
        
        private DesignProfileDataTable tableDesignProfile;
        
        private GISForm1DataTable tableGISForm1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsSagAndTension() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsSagAndTension(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Title"] != null)) {
                    base.Tables.Add(new TitleDataTable(ds.Tables["Title"]));
                }
                if ((ds.Tables["SagAndTension"] != null)) {
                    base.Tables.Add(new SagAndTensionDataTable(ds.Tables["SagAndTension"]));
                }
                if ((ds.Tables["PoleForce"] != null)) {
                    base.Tables.Add(new PoleForceDataTable(ds.Tables["PoleForce"]));
                }
                if ((ds.Tables["Node"] != null)) {
                    base.Tables.Add(new NodeDataTable(ds.Tables["Node"]));
                }
                if ((ds.Tables["Branch"] != null)) {
                    base.Tables.Add(new BranchDataTable(ds.Tables["Branch"]));
                }
                if ((ds.Tables["CrossSection"] != null)) {
                    base.Tables.Add(new CrossSectionDataTable(ds.Tables["CrossSection"]));
                }
                if ((ds.Tables["InputInfoTranse"] != null)) {
                    base.Tables.Add(new InputInfoTranseDataTable(ds.Tables["InputInfoTranse"]));
                }
                if ((ds.Tables["LoadCurrent"] != null)) {
                    base.Tables.Add(new LoadCurrentDataTable(ds.Tables["LoadCurrent"]));
                }
                if ((ds.Tables["LoadPower"] != null)) {
                    base.Tables.Add(new LoadPowerDataTable(ds.Tables["LoadPower"]));
                }
                if ((ds.Tables["LoadBranch"] != null)) {
                    base.Tables.Add(new LoadBranchDataTable(ds.Tables["LoadBranch"]));
                }
                if ((ds.Tables["Remark"] != null)) {
                    base.Tables.Add(new RemarkDataTable(ds.Tables["Remark"]));
                }
                if ((ds.Tables["RudSurface"] != null)) {
                    base.Tables.Add(new RudSurfaceDataTable(ds.Tables["RudSurface"]));
                }
                if ((ds.Tables["PoleWithHalter"] != null)) {
                    base.Tables.Add(new PoleWithHalterDataTable(ds.Tables["PoleWithHalter"]));
                }
                if ((ds.Tables["PoleWithOutHalter"] != null)) {
                    base.Tables.Add(new PoleWithOutHalterDataTable(ds.Tables["PoleWithOutHalter"]));
                }
                if ((ds.Tables["StatusReport"] != null)) {
                    base.Tables.Add(new StatusReportDataTable(ds.Tables["StatusReport"]));
                }
                if ((ds.Tables["AirPostDiagram"] != null)) {
                    base.Tables.Add(new AirPostDiagramDataTable(ds.Tables["AirPostDiagram"]));
                }
                if ((ds.Tables["GroundPostDiagram"] != null)) {
                    base.Tables.Add(new GroundPostDiagramDataTable(ds.Tables["GroundPostDiagram"]));
                }
                if ((ds.Tables["ConsolDiagram"] != null)) {
                    base.Tables.Add(new ConsolDiagramDataTable(ds.Tables["ConsolDiagram"]));
                }
                if ((ds.Tables["Content"] != null)) {
                    base.Tables.Add(new ContentDataTable(ds.Tables["Content"]));
                }
                if ((ds.Tables["DesignProfile"] != null)) {
                    base.Tables.Add(new DesignProfileDataTable(ds.Tables["DesignProfile"]));
                }
                if ((ds.Tables["GISForm1"] != null)) {
                    base.Tables.Add(new GISForm1DataTable(ds.Tables["GISForm1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TitleDataTable Title {
            get {
                return this.tableTitle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SagAndTensionDataTable SagAndTension {
            get {
                return this.tableSagAndTension;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PoleForceDataTable PoleForce {
            get {
                return this.tablePoleForce;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NodeDataTable Node {
            get {
                return this.tableNode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BranchDataTable Branch {
            get {
                return this.tableBranch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CrossSectionDataTable CrossSection {
            get {
                return this.tableCrossSection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InputInfoTranseDataTable InputInfoTranse {
            get {
                return this.tableInputInfoTranse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoadCurrentDataTable LoadCurrent {
            get {
                return this.tableLoadCurrent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoadPowerDataTable LoadPower {
            get {
                return this.tableLoadPower;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoadBranchDataTable LoadBranch {
            get {
                return this.tableLoadBranch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RemarkDataTable Remark {
            get {
                return this.tableRemark;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RudSurfaceDataTable RudSurface {
            get {
                return this.tableRudSurface;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PoleWithHalterDataTable PoleWithHalter {
            get {
                return this.tablePoleWithHalter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PoleWithOutHalterDataTable PoleWithOutHalter {
            get {
                return this.tablePoleWithOutHalter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StatusReportDataTable StatusReport {
            get {
                return this.tableStatusReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AirPostDiagramDataTable AirPostDiagram {
            get {
                return this.tableAirPostDiagram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroundPostDiagramDataTable GroundPostDiagram {
            get {
                return this.tableGroundPostDiagram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConsolDiagramDataTable ConsolDiagram {
            get {
                return this.tableConsolDiagram;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContentDataTable Content {
            get {
                return this.tableContent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DesignProfileDataTable DesignProfile {
            get {
                return this.tableDesignProfile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GISForm1DataTable GISForm1 {
            get {
                return this.tableGISForm1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsSagAndTension cln = ((dsSagAndTension)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Title"] != null)) {
                    base.Tables.Add(new TitleDataTable(ds.Tables["Title"]));
                }
                if ((ds.Tables["SagAndTension"] != null)) {
                    base.Tables.Add(new SagAndTensionDataTable(ds.Tables["SagAndTension"]));
                }
                if ((ds.Tables["PoleForce"] != null)) {
                    base.Tables.Add(new PoleForceDataTable(ds.Tables["PoleForce"]));
                }
                if ((ds.Tables["Node"] != null)) {
                    base.Tables.Add(new NodeDataTable(ds.Tables["Node"]));
                }
                if ((ds.Tables["Branch"] != null)) {
                    base.Tables.Add(new BranchDataTable(ds.Tables["Branch"]));
                }
                if ((ds.Tables["CrossSection"] != null)) {
                    base.Tables.Add(new CrossSectionDataTable(ds.Tables["CrossSection"]));
                }
                if ((ds.Tables["InputInfoTranse"] != null)) {
                    base.Tables.Add(new InputInfoTranseDataTable(ds.Tables["InputInfoTranse"]));
                }
                if ((ds.Tables["LoadCurrent"] != null)) {
                    base.Tables.Add(new LoadCurrentDataTable(ds.Tables["LoadCurrent"]));
                }
                if ((ds.Tables["LoadPower"] != null)) {
                    base.Tables.Add(new LoadPowerDataTable(ds.Tables["LoadPower"]));
                }
                if ((ds.Tables["LoadBranch"] != null)) {
                    base.Tables.Add(new LoadBranchDataTable(ds.Tables["LoadBranch"]));
                }
                if ((ds.Tables["Remark"] != null)) {
                    base.Tables.Add(new RemarkDataTable(ds.Tables["Remark"]));
                }
                if ((ds.Tables["RudSurface"] != null)) {
                    base.Tables.Add(new RudSurfaceDataTable(ds.Tables["RudSurface"]));
                }
                if ((ds.Tables["PoleWithHalter"] != null)) {
                    base.Tables.Add(new PoleWithHalterDataTable(ds.Tables["PoleWithHalter"]));
                }
                if ((ds.Tables["PoleWithOutHalter"] != null)) {
                    base.Tables.Add(new PoleWithOutHalterDataTable(ds.Tables["PoleWithOutHalter"]));
                }
                if ((ds.Tables["StatusReport"] != null)) {
                    base.Tables.Add(new StatusReportDataTable(ds.Tables["StatusReport"]));
                }
                if ((ds.Tables["AirPostDiagram"] != null)) {
                    base.Tables.Add(new AirPostDiagramDataTable(ds.Tables["AirPostDiagram"]));
                }
                if ((ds.Tables["GroundPostDiagram"] != null)) {
                    base.Tables.Add(new GroundPostDiagramDataTable(ds.Tables["GroundPostDiagram"]));
                }
                if ((ds.Tables["ConsolDiagram"] != null)) {
                    base.Tables.Add(new ConsolDiagramDataTable(ds.Tables["ConsolDiagram"]));
                }
                if ((ds.Tables["Content"] != null)) {
                    base.Tables.Add(new ContentDataTable(ds.Tables["Content"]));
                }
                if ((ds.Tables["DesignProfile"] != null)) {
                    base.Tables.Add(new DesignProfileDataTable(ds.Tables["DesignProfile"]));
                }
                if ((ds.Tables["GISForm1"] != null)) {
                    base.Tables.Add(new GISForm1DataTable(ds.Tables["GISForm1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTitle = ((TitleDataTable)(base.Tables["Title"]));
            if ((initTable == true)) {
                if ((this.tableTitle != null)) {
                    this.tableTitle.InitVars();
                }
            }
            this.tableSagAndTension = ((SagAndTensionDataTable)(base.Tables["SagAndTension"]));
            if ((initTable == true)) {
                if ((this.tableSagAndTension != null)) {
                    this.tableSagAndTension.InitVars();
                }
            }
            this.tablePoleForce = ((PoleForceDataTable)(base.Tables["PoleForce"]));
            if ((initTable == true)) {
                if ((this.tablePoleForce != null)) {
                    this.tablePoleForce.InitVars();
                }
            }
            this.tableNode = ((NodeDataTable)(base.Tables["Node"]));
            if ((initTable == true)) {
                if ((this.tableNode != null)) {
                    this.tableNode.InitVars();
                }
            }
            this.tableBranch = ((BranchDataTable)(base.Tables["Branch"]));
            if ((initTable == true)) {
                if ((this.tableBranch != null)) {
                    this.tableBranch.InitVars();
                }
            }
            this.tableCrossSection = ((CrossSectionDataTable)(base.Tables["CrossSection"]));
            if ((initTable == true)) {
                if ((this.tableCrossSection != null)) {
                    this.tableCrossSection.InitVars();
                }
            }
            this.tableInputInfoTranse = ((InputInfoTranseDataTable)(base.Tables["InputInfoTranse"]));
            if ((initTable == true)) {
                if ((this.tableInputInfoTranse != null)) {
                    this.tableInputInfoTranse.InitVars();
                }
            }
            this.tableLoadCurrent = ((LoadCurrentDataTable)(base.Tables["LoadCurrent"]));
            if ((initTable == true)) {
                if ((this.tableLoadCurrent != null)) {
                    this.tableLoadCurrent.InitVars();
                }
            }
            this.tableLoadPower = ((LoadPowerDataTable)(base.Tables["LoadPower"]));
            if ((initTable == true)) {
                if ((this.tableLoadPower != null)) {
                    this.tableLoadPower.InitVars();
                }
            }
            this.tableLoadBranch = ((LoadBranchDataTable)(base.Tables["LoadBranch"]));
            if ((initTable == true)) {
                if ((this.tableLoadBranch != null)) {
                    this.tableLoadBranch.InitVars();
                }
            }
            this.tableRemark = ((RemarkDataTable)(base.Tables["Remark"]));
            if ((initTable == true)) {
                if ((this.tableRemark != null)) {
                    this.tableRemark.InitVars();
                }
            }
            this.tableRudSurface = ((RudSurfaceDataTable)(base.Tables["RudSurface"]));
            if ((initTable == true)) {
                if ((this.tableRudSurface != null)) {
                    this.tableRudSurface.InitVars();
                }
            }
            this.tablePoleWithHalter = ((PoleWithHalterDataTable)(base.Tables["PoleWithHalter"]));
            if ((initTable == true)) {
                if ((this.tablePoleWithHalter != null)) {
                    this.tablePoleWithHalter.InitVars();
                }
            }
            this.tablePoleWithOutHalter = ((PoleWithOutHalterDataTable)(base.Tables["PoleWithOutHalter"]));
            if ((initTable == true)) {
                if ((this.tablePoleWithOutHalter != null)) {
                    this.tablePoleWithOutHalter.InitVars();
                }
            }
            this.tableStatusReport = ((StatusReportDataTable)(base.Tables["StatusReport"]));
            if ((initTable == true)) {
                if ((this.tableStatusReport != null)) {
                    this.tableStatusReport.InitVars();
                }
            }
            this.tableAirPostDiagram = ((AirPostDiagramDataTable)(base.Tables["AirPostDiagram"]));
            if ((initTable == true)) {
                if ((this.tableAirPostDiagram != null)) {
                    this.tableAirPostDiagram.InitVars();
                }
            }
            this.tableGroundPostDiagram = ((GroundPostDiagramDataTable)(base.Tables["GroundPostDiagram"]));
            if ((initTable == true)) {
                if ((this.tableGroundPostDiagram != null)) {
                    this.tableGroundPostDiagram.InitVars();
                }
            }
            this.tableConsolDiagram = ((ConsolDiagramDataTable)(base.Tables["ConsolDiagram"]));
            if ((initTable == true)) {
                if ((this.tableConsolDiagram != null)) {
                    this.tableConsolDiagram.InitVars();
                }
            }
            this.tableContent = ((ContentDataTable)(base.Tables["Content"]));
            if ((initTable == true)) {
                if ((this.tableContent != null)) {
                    this.tableContent.InitVars();
                }
            }
            this.tableDesignProfile = ((DesignProfileDataTable)(base.Tables["DesignProfile"]));
            if ((initTable == true)) {
                if ((this.tableDesignProfile != null)) {
                    this.tableDesignProfile.InitVars();
                }
            }
            this.tableGISForm1 = ((GISForm1DataTable)(base.Tables["GISForm1"]));
            if ((initTable == true)) {
                if ((this.tableGISForm1 != null)) {
                    this.tableGISForm1.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsSagAndTension";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsSagAndTension.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTitle = new TitleDataTable();
            base.Tables.Add(this.tableTitle);
            this.tableSagAndTension = new SagAndTensionDataTable();
            base.Tables.Add(this.tableSagAndTension);
            this.tablePoleForce = new PoleForceDataTable();
            base.Tables.Add(this.tablePoleForce);
            this.tableNode = new NodeDataTable();
            base.Tables.Add(this.tableNode);
            this.tableBranch = new BranchDataTable();
            base.Tables.Add(this.tableBranch);
            this.tableCrossSection = new CrossSectionDataTable();
            base.Tables.Add(this.tableCrossSection);
            this.tableInputInfoTranse = new InputInfoTranseDataTable();
            base.Tables.Add(this.tableInputInfoTranse);
            this.tableLoadCurrent = new LoadCurrentDataTable();
            base.Tables.Add(this.tableLoadCurrent);
            this.tableLoadPower = new LoadPowerDataTable();
            base.Tables.Add(this.tableLoadPower);
            this.tableLoadBranch = new LoadBranchDataTable();
            base.Tables.Add(this.tableLoadBranch);
            this.tableRemark = new RemarkDataTable();
            base.Tables.Add(this.tableRemark);
            this.tableRudSurface = new RudSurfaceDataTable();
            base.Tables.Add(this.tableRudSurface);
            this.tablePoleWithHalter = new PoleWithHalterDataTable();
            base.Tables.Add(this.tablePoleWithHalter);
            this.tablePoleWithOutHalter = new PoleWithOutHalterDataTable();
            base.Tables.Add(this.tablePoleWithOutHalter);
            this.tableStatusReport = new StatusReportDataTable();
            base.Tables.Add(this.tableStatusReport);
            this.tableAirPostDiagram = new AirPostDiagramDataTable();
            base.Tables.Add(this.tableAirPostDiagram);
            this.tableGroundPostDiagram = new GroundPostDiagramDataTable();
            base.Tables.Add(this.tableGroundPostDiagram);
            this.tableConsolDiagram = new ConsolDiagramDataTable();
            base.Tables.Add(this.tableConsolDiagram);
            this.tableContent = new ContentDataTable();
            base.Tables.Add(this.tableContent);
            this.tableDesignProfile = new DesignProfileDataTable();
            base.Tables.Add(this.tableDesignProfile);
            this.tableGISForm1 = new GISForm1DataTable();
            base.Tables.Add(this.tableGISForm1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTitle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSagAndTension() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePoleForce() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBranch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCrossSection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInputInfoTranse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoadCurrent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoadPower() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoadBranch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRemark() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRudSurface() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePoleWithHalter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePoleWithOutHalter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStatusReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAirPostDiagram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroundPostDiagram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsolDiagram() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDesignProfile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGISForm1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsSagAndTension ds = new dsSagAndTension();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TitleRowChangeEventHandler(object sender, TitleRowChangeEvent e);
        
        public delegate void SagAndTensionRowChangeEventHandler(object sender, SagAndTensionRowChangeEvent e);
        
        public delegate void PoleForceRowChangeEventHandler(object sender, PoleForceRowChangeEvent e);
        
        public delegate void NodeRowChangeEventHandler(object sender, NodeRowChangeEvent e);
        
        public delegate void BranchRowChangeEventHandler(object sender, BranchRowChangeEvent e);
        
        public delegate void CrossSectionRowChangeEventHandler(object sender, CrossSectionRowChangeEvent e);
        
        public delegate void InputInfoTranseRowChangeEventHandler(object sender, InputInfoTranseRowChangeEvent e);
        
        public delegate void LoadCurrentRowChangeEventHandler(object sender, LoadCurrentRowChangeEvent e);
        
        public delegate void LoadPowerRowChangeEventHandler(object sender, LoadPowerRowChangeEvent e);
        
        public delegate void LoadBranchRowChangeEventHandler(object sender, LoadBranchRowChangeEvent e);
        
        public delegate void RemarkRowChangeEventHandler(object sender, RemarkRowChangeEvent e);
        
        public delegate void RudSurfaceRowChangeEventHandler(object sender, RudSurfaceRowChangeEvent e);
        
        public delegate void PoleWithHalterRowChangeEventHandler(object sender, PoleWithHalterRowChangeEvent e);
        
        public delegate void PoleWithOutHalterRowChangeEventHandler(object sender, PoleWithOutHalterRowChangeEvent e);
        
        public delegate void StatusReportRowChangeEventHandler(object sender, StatusReportRowChangeEvent e);
        
        public delegate void AirPostDiagramRowChangeEventHandler(object sender, AirPostDiagramRowChangeEvent e);
        
        public delegate void GroundPostDiagramRowChangeEventHandler(object sender, GroundPostDiagramRowChangeEvent e);
        
        public delegate void ConsolDiagramRowChangeEventHandler(object sender, ConsolDiagramRowChangeEvent e);
        
        public delegate void ContentRowChangeEventHandler(object sender, ContentRowChangeEvent e);
        
        public delegate void DesignProfileRowChangeEventHandler(object sender, DesignProfileRowChangeEvent e);
        
        public delegate void GISForm1RowChangeEventHandler(object sender, GISForm1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TitleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnSectionCount;
            
            private global::System.Data.DataColumn columnPoleCount;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnArea;
            
            private global::System.Data.DataColumn columnDesigner;
            
            private global::System.Data.DataColumn columnCredit;
            
            private global::System.Data.DataColumn columnLogo;
            
            private global::System.Data.DataColumn columnLogoName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TitleDataTable() {
                this.TableName = "Title";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TitleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TitleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCountColumn {
                get {
                    return this.columnSectionCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoleCountColumn {
                get {
                    return this.columnPoleCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaColumn {
                get {
                    return this.columnArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignerColumn {
                get {
                    return this.columnDesigner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditColumn {
                get {
                    return this.columnCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoColumn {
                get {
                    return this.columnLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoNameColumn {
                get {
                    return this.columnLogoName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TitleRow this[int index] {
                get {
                    return ((TitleRow)(this.Rows[index]));
                }
            }
            
            public event TitleRowChangeEventHandler TitleRowChanging;
            
            public event TitleRowChangeEventHandler TitleRowChanged;
            
            public event TitleRowChangeEventHandler TitleRowDeleting;
            
            public event TitleRowChangeEventHandler TitleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTitleRow(TitleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TitleRow AddTitleRow(string ProjectName, string SectionCount, string PoleCount, string Date, string Area, string Designer, string Credit, byte[] Logo, string LogoName) {
                TitleRow rowTitleRow = ((TitleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectName,
                        SectionCount,
                        PoleCount,
                        Date,
                        Area,
                        Designer,
                        Credit,
                        Logo,
                        LogoName};
                rowTitleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTitleRow);
                return rowTitleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TitleDataTable cln = ((TitleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TitleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnSectionCount = base.Columns["SectionCount"];
                this.columnPoleCount = base.Columns["PoleCount"];
                this.columnDate = base.Columns["Date"];
                this.columnArea = base.Columns["Area"];
                this.columnDesigner = base.Columns["Designer"];
                this.columnCredit = base.Columns["Credit"];
                this.columnLogo = base.Columns["Logo"];
                this.columnLogoName = base.Columns["LogoName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnSectionCount = new global::System.Data.DataColumn("SectionCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCount);
                this.columnPoleCount = new global::System.Data.DataColumn("PoleCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoleCount);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnArea = new global::System.Data.DataColumn("Area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArea);
                this.columnDesigner = new global::System.Data.DataColumn("Designer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesigner);
                this.columnCredit = new global::System.Data.DataColumn("Credit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCredit);
                this.columnLogo = new global::System.Data.DataColumn("Logo", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogo);
                this.columnLogoName = new global::System.Data.DataColumn("LogoName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogoName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TitleRow NewTitleRow() {
                return ((TitleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TitleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TitleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TitleRowChanged != null)) {
                    this.TitleRowChanged(this, new TitleRowChangeEvent(((TitleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TitleRowChanging != null)) {
                    this.TitleRowChanging(this, new TitleRowChangeEvent(((TitleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TitleRowDeleted != null)) {
                    this.TitleRowDeleted(this, new TitleRowChangeEvent(((TitleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TitleRowDeleting != null)) {
                    this.TitleRowDeleting(this, new TitleRowChangeEvent(((TitleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTitleRow(TitleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TitleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SagAndTensionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionCode;
            
            private global::System.Data.DataColumn columnStartPole;
            
            private global::System.Data.DataColumn columnEndPole;
            
            private global::System.Data.DataColumn columnNormH;
            
            private global::System.Data.DataColumn columnNormF;
            
            private global::System.Data.DataColumn columnWindAndIceH;
            
            private global::System.Data.DataColumn columnWindAndIceF;
            
            private global::System.Data.DataColumn columnMinTempH;
            
            private global::System.Data.DataColumn columnMinTempF;
            
            private global::System.Data.DataColumn columnMaxTempH;
            
            private global::System.Data.DataColumn columnMaxTempF;
            
            private global::System.Data.DataColumn columnWindH;
            
            private global::System.Data.DataColumn columnWindF;
            
            private global::System.Data.DataColumn columnIceH;
            
            private global::System.Data.DataColumn columnIceF;
            
            private global::System.Data.DataColumn columnSpan;
            
            private global::System.Data.DataColumn columnCondName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SagAndTensionDataTable() {
                this.TableName = "SagAndTension";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SagAndTensionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SagAndTensionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionCodeColumn {
                get {
                    return this.columnSectionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartPoleColumn {
                get {
                    return this.columnStartPole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndPoleColumn {
                get {
                    return this.columnEndPole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormHColumn {
                get {
                    return this.columnNormH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormFColumn {
                get {
                    return this.columnNormF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindAndIceHColumn {
                get {
                    return this.columnWindAndIceH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindAndIceFColumn {
                get {
                    return this.columnWindAndIceF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTempHColumn {
                get {
                    return this.columnMinTempH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTempFColumn {
                get {
                    return this.columnMinTempF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxTempHColumn {
                get {
                    return this.columnMaxTempH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxTempFColumn {
                get {
                    return this.columnMaxTempF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindHColumn {
                get {
                    return this.columnWindH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindFColumn {
                get {
                    return this.columnWindF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IceHColumn {
                get {
                    return this.columnIceH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IceFColumn {
                get {
                    return this.columnIceF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SpanColumn {
                get {
                    return this.columnSpan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CondNameColumn {
                get {
                    return this.columnCondName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SagAndTensionRow this[int index] {
                get {
                    return ((SagAndTensionRow)(this.Rows[index]));
                }
            }
            
            public event SagAndTensionRowChangeEventHandler SagAndTensionRowChanging;
            
            public event SagAndTensionRowChangeEventHandler SagAndTensionRowChanged;
            
            public event SagAndTensionRowChangeEventHandler SagAndTensionRowDeleting;
            
            public event SagAndTensionRowChangeEventHandler SagAndTensionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSagAndTensionRow(SagAndTensionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SagAndTensionRow AddSagAndTensionRow(
                        string SectionCode, 
                        string StartPole, 
                        string EndPole, 
                        string NormH, 
                        string NormF, 
                        string WindAndIceH, 
                        string WindAndIceF, 
                        string MinTempH, 
                        string MinTempF, 
                        string MaxTempH, 
                        string MaxTempF, 
                        string WindH, 
                        string WindF, 
                        string IceH, 
                        string IceF, 
                        string Span, 
                        string CondName) {
                SagAndTensionRow rowSagAndTensionRow = ((SagAndTensionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionCode,
                        StartPole,
                        EndPole,
                        NormH,
                        NormF,
                        WindAndIceH,
                        WindAndIceF,
                        MinTempH,
                        MinTempF,
                        MaxTempH,
                        MaxTempF,
                        WindH,
                        WindF,
                        IceH,
                        IceF,
                        Span,
                        CondName};
                rowSagAndTensionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSagAndTensionRow);
                return rowSagAndTensionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SagAndTensionDataTable cln = ((SagAndTensionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SagAndTensionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionCode = base.Columns["SectionCode"];
                this.columnStartPole = base.Columns["StartPole"];
                this.columnEndPole = base.Columns["EndPole"];
                this.columnNormH = base.Columns["NormH"];
                this.columnNormF = base.Columns["NormF"];
                this.columnWindAndIceH = base.Columns["WindAndIceH"];
                this.columnWindAndIceF = base.Columns["WindAndIceF"];
                this.columnMinTempH = base.Columns["MinTempH"];
                this.columnMinTempF = base.Columns["MinTempF"];
                this.columnMaxTempH = base.Columns["MaxTempH"];
                this.columnMaxTempF = base.Columns["MaxTempF"];
                this.columnWindH = base.Columns["WindH"];
                this.columnWindF = base.Columns["WindF"];
                this.columnIceH = base.Columns["IceH"];
                this.columnIceF = base.Columns["IceF"];
                this.columnSpan = base.Columns["Span"];
                this.columnCondName = base.Columns["CondName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionCode = new global::System.Data.DataColumn("SectionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionCode);
                this.columnStartPole = new global::System.Data.DataColumn("StartPole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartPole);
                this.columnEndPole = new global::System.Data.DataColumn("EndPole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndPole);
                this.columnNormH = new global::System.Data.DataColumn("NormH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormH);
                this.columnNormF = new global::System.Data.DataColumn("NormF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormF);
                this.columnWindAndIceH = new global::System.Data.DataColumn("WindAndIceH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWindAndIceH);
                this.columnWindAndIceF = new global::System.Data.DataColumn("WindAndIceF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWindAndIceF);
                this.columnMinTempH = new global::System.Data.DataColumn("MinTempH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTempH);
                this.columnMinTempF = new global::System.Data.DataColumn("MinTempF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTempF);
                this.columnMaxTempH = new global::System.Data.DataColumn("MaxTempH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxTempH);
                this.columnMaxTempF = new global::System.Data.DataColumn("MaxTempF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxTempF);
                this.columnWindH = new global::System.Data.DataColumn("WindH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWindH);
                this.columnWindF = new global::System.Data.DataColumn("WindF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWindF);
                this.columnIceH = new global::System.Data.DataColumn("IceH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIceH);
                this.columnIceF = new global::System.Data.DataColumn("IceF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIceF);
                this.columnSpan = new global::System.Data.DataColumn("Span", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpan);
                this.columnCondName = new global::System.Data.DataColumn("CondName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SagAndTensionRow NewSagAndTensionRow() {
                return ((SagAndTensionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SagAndTensionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SagAndTensionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SagAndTensionRowChanged != null)) {
                    this.SagAndTensionRowChanged(this, new SagAndTensionRowChangeEvent(((SagAndTensionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SagAndTensionRowChanging != null)) {
                    this.SagAndTensionRowChanging(this, new SagAndTensionRowChangeEvent(((SagAndTensionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SagAndTensionRowDeleted != null)) {
                    this.SagAndTensionRowDeleted(this, new SagAndTensionRowChangeEvent(((SagAndTensionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SagAndTensionRowDeleting != null)) {
                    this.SagAndTensionRowDeleting(this, new SagAndTensionRowChangeEvent(((SagAndTensionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSagAndTensionRow(SagAndTensionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SagAndTensionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PoleForceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionNumber;
            
            private global::System.Data.DataColumn columnPoleNumber;
            
            private global::System.Data.DataColumn columnNormal;
            
            private global::System.Data.DataColumn columnIce;
            
            private global::System.Data.DataColumn columnWind;
            
            private global::System.Data.DataColumn columnMaxTemp;
            
            private global::System.Data.DataColumn columnMinTemp;
            
            private global::System.Data.DataColumn columnIceWind;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleForceDataTable() {
                this.TableName = "PoleForce";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoleForceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PoleForceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoleNumberColumn {
                get {
                    return this.columnPoleNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormalColumn {
                get {
                    return this.columnNormal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IceColumn {
                get {
                    return this.columnIce;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindColumn {
                get {
                    return this.columnWind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxTempColumn {
                get {
                    return this.columnMaxTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTempColumn {
                get {
                    return this.columnMinTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IceWindColumn {
                get {
                    return this.columnIceWind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleForceRow this[int index] {
                get {
                    return ((PoleForceRow)(this.Rows[index]));
                }
            }
            
            public event PoleForceRowChangeEventHandler PoleForceRowChanging;
            
            public event PoleForceRowChangeEventHandler PoleForceRowChanged;
            
            public event PoleForceRowChangeEventHandler PoleForceRowDeleting;
            
            public event PoleForceRowChangeEventHandler PoleForceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPoleForceRow(PoleForceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleForceRow AddPoleForceRow(string SectionNumber, string PoleNumber, string Normal, string Ice, string Wind, string MaxTemp, string MinTemp, string IceWind) {
                PoleForceRow rowPoleForceRow = ((PoleForceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionNumber,
                        PoleNumber,
                        Normal,
                        Ice,
                        Wind,
                        MaxTemp,
                        MinTemp,
                        IceWind};
                rowPoleForceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPoleForceRow);
                return rowPoleForceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PoleForceDataTable cln = ((PoleForceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PoleForceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionNumber = base.Columns["SectionNumber"];
                this.columnPoleNumber = base.Columns["PoleNumber"];
                this.columnNormal = base.Columns["Normal"];
                this.columnIce = base.Columns["Ice"];
                this.columnWind = base.Columns["Wind"];
                this.columnMaxTemp = base.Columns["MaxTemp"];
                this.columnMinTemp = base.Columns["MinTemp"];
                this.columnIceWind = base.Columns["IceWind"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionNumber = new global::System.Data.DataColumn("SectionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionNumber);
                this.columnPoleNumber = new global::System.Data.DataColumn("PoleNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoleNumber);
                this.columnNormal = new global::System.Data.DataColumn("Normal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormal);
                this.columnIce = new global::System.Data.DataColumn("Ice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIce);
                this.columnWind = new global::System.Data.DataColumn("Wind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWind);
                this.columnMaxTemp = new global::System.Data.DataColumn("MaxTemp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxTemp);
                this.columnMinTemp = new global::System.Data.DataColumn("MinTemp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTemp);
                this.columnIceWind = new global::System.Data.DataColumn("IceWind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIceWind);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleForceRow NewPoleForceRow() {
                return ((PoleForceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PoleForceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PoleForceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PoleForceRowChanged != null)) {
                    this.PoleForceRowChanged(this, new PoleForceRowChangeEvent(((PoleForceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PoleForceRowChanging != null)) {
                    this.PoleForceRowChanging(this, new PoleForceRowChangeEvent(((PoleForceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PoleForceRowDeleted != null)) {
                    this.PoleForceRowDeleted(this, new PoleForceRowChangeEvent(((PoleForceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PoleForceRowDeleting != null)) {
                    this.PoleForceRowDeleting(this, new PoleForceRowChangeEvent(((PoleForceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePoleForceRow(PoleForceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PoleForceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNodeName;
            
            private global::System.Data.DataColumn columnVoltABS;
            
            private global::System.Data.DataColumn columnVoltArg;
            
            private global::System.Data.DataColumn columnDropVolt;
            
            private global::System.Data.DataColumn columnLoadPowerActive;
            
            private global::System.Data.DataColumn columnLoadPower;
            
            private global::System.Data.DataColumn columnLoadCurrnetABS;
            
            private global::System.Data.DataColumn columnLoadCurrentArg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NodeDataTable() {
                this.TableName = "Node";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeNameColumn {
                get {
                    return this.columnNodeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoltABSColumn {
                get {
                    return this.columnVoltABS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoltArgColumn {
                get {
                    return this.columnVoltArg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropVoltColumn {
                get {
                    return this.columnDropVolt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadPowerActiveColumn {
                get {
                    return this.columnLoadPowerActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadPowerColumn {
                get {
                    return this.columnLoadPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadCurrnetABSColumn {
                get {
                    return this.columnLoadCurrnetABS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadCurrentArgColumn {
                get {
                    return this.columnLoadCurrentArg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NodeRow this[int index] {
                get {
                    return ((NodeRow)(this.Rows[index]));
                }
            }
            
            public event NodeRowChangeEventHandler NodeRowChanging;
            
            public event NodeRowChangeEventHandler NodeRowChanged;
            
            public event NodeRowChangeEventHandler NodeRowDeleting;
            
            public event NodeRowChangeEventHandler NodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNodeRow(NodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NodeRow AddNodeRow(string NodeName, string VoltABS, string VoltArg, string DropVolt, string LoadPowerActive, string LoadPower, string LoadCurrnetABS, string LoadCurrentArg) {
                NodeRow rowNodeRow = ((NodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NodeName,
                        VoltABS,
                        VoltArg,
                        DropVolt,
                        LoadPowerActive,
                        LoadPower,
                        LoadCurrnetABS,
                        LoadCurrentArg};
                rowNodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNodeRow);
                return rowNodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NodeDataTable cln = ((NodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNodeName = base.Columns["NodeName"];
                this.columnVoltABS = base.Columns["VoltABS"];
                this.columnVoltArg = base.Columns["VoltArg"];
                this.columnDropVolt = base.Columns["DropVolt"];
                this.columnLoadPowerActive = base.Columns["LoadPowerActive"];
                this.columnLoadPower = base.Columns["LoadPower"];
                this.columnLoadCurrnetABS = base.Columns["LoadCurrnetABS"];
                this.columnLoadCurrentArg = base.Columns["LoadCurrentArg"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNodeName = new global::System.Data.DataColumn("NodeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeName);
                this.columnVoltABS = new global::System.Data.DataColumn("VoltABS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoltABS);
                this.columnVoltArg = new global::System.Data.DataColumn("VoltArg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoltArg);
                this.columnDropVolt = new global::System.Data.DataColumn("DropVolt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropVolt);
                this.columnLoadPowerActive = new global::System.Data.DataColumn("LoadPowerActive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadPowerActive);
                this.columnLoadPower = new global::System.Data.DataColumn("LoadPower", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadPower);
                this.columnLoadCurrnetABS = new global::System.Data.DataColumn("LoadCurrnetABS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadCurrnetABS);
                this.columnLoadCurrentArg = new global::System.Data.DataColumn("LoadCurrentArg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadCurrentArg);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NodeRow NewNodeRow() {
                return ((NodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NodeRowChanged != null)) {
                    this.NodeRowChanged(this, new NodeRowChangeEvent(((NodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NodeRowChanging != null)) {
                    this.NodeRowChanging(this, new NodeRowChangeEvent(((NodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NodeRowDeleted != null)) {
                    this.NodeRowDeleted(this, new NodeRowChangeEvent(((NodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NodeRowDeleting != null)) {
                    this.NodeRowDeleting(this, new NodeRowChangeEvent(((NodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNodeRow(NodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BranchDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBranchName;
            
            private global::System.Data.DataColumn columnLenght;
            
            private global::System.Data.DataColumn columnCurrnetABS;
            
            private global::System.Data.DataColumn columnCurrentArg;
            
            private global::System.Data.DataColumn columnCondutilization;
            
            private global::System.Data.DataColumn columnTotalLoad;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnCapacity;
            
            private global::System.Data.DataColumn columnCasualty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchDataTable() {
                this.TableName = "Branch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BranchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BranchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchNameColumn {
                get {
                    return this.columnBranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LenghtColumn {
                get {
                    return this.columnLenght;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrnetABSColumn {
                get {
                    return this.columnCurrnetABS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentArgColumn {
                get {
                    return this.columnCurrentArg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CondutilizationColumn {
                get {
                    return this.columnCondutilization;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLoadColumn {
                get {
                    return this.columnTotalLoad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapacityColumn {
                get {
                    return this.columnCapacity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CasualtyColumn {
                get {
                    return this.columnCasualty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow this[int index] {
                get {
                    return ((BranchRow)(this.Rows[index]));
                }
            }
            
            public event BranchRowChangeEventHandler BranchRowChanging;
            
            public event BranchRowChangeEventHandler BranchRowChanged;
            
            public event BranchRowChangeEventHandler BranchRowDeleting;
            
            public event BranchRowChangeEventHandler BranchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBranchRow(BranchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow AddBranchRow(string BranchName, string Lenght, string CurrnetABS, string CurrentArg, string Condutilization, string TotalLoad, string Type, string Capacity, string Casualty) {
                BranchRow rowBranchRow = ((BranchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BranchName,
                        Lenght,
                        CurrnetABS,
                        CurrentArg,
                        Condutilization,
                        TotalLoad,
                        Type,
                        Capacity,
                        Casualty};
                rowBranchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBranchRow);
                return rowBranchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BranchDataTable cln = ((BranchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BranchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBranchName = base.Columns["BranchName"];
                this.columnLenght = base.Columns["Lenght"];
                this.columnCurrnetABS = base.Columns["CurrnetABS"];
                this.columnCurrentArg = base.Columns["CurrentArg"];
                this.columnCondutilization = base.Columns["Condutilization"];
                this.columnTotalLoad = base.Columns["TotalLoad"];
                this.columnType = base.Columns["Type"];
                this.columnCapacity = base.Columns["Capacity"];
                this.columnCasualty = base.Columns["Casualty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBranchName = new global::System.Data.DataColumn("BranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchName);
                this.columnLenght = new global::System.Data.DataColumn("Lenght", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLenght);
                this.columnCurrnetABS = new global::System.Data.DataColumn("CurrnetABS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrnetABS);
                this.columnCurrentArg = new global::System.Data.DataColumn("CurrentArg", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentArg);
                this.columnCondutilization = new global::System.Data.DataColumn("Condutilization", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondutilization);
                this.columnTotalLoad = new global::System.Data.DataColumn("TotalLoad", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLoad);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnCapacity = new global::System.Data.DataColumn("Capacity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapacity);
                this.columnCasualty = new global::System.Data.DataColumn("Casualty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCasualty);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow NewBranchRow() {
                return ((BranchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BranchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BranchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BranchRowChanged != null)) {
                    this.BranchRowChanged(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BranchRowChanging != null)) {
                    this.BranchRowChanging(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BranchRowDeleted != null)) {
                    this.BranchRowDeleted(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BranchRowDeleting != null)) {
                    this.BranchRowDeleting(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBranchRow(BranchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BranchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CrossSectionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFrom;
            
            private global::System.Data.DataColumn columnTo;
            
            private global::System.Data.DataColumn columnNameExist;
            
            private global::System.Data.DataColumn columnLenght;
            
            private global::System.Data.DataColumn columnNameComment;
            
            private global::System.Data.DataColumn columnCrossSection;
            
            private global::System.Data.DataColumn columnCurrent;
            
            private global::System.Data.DataColumn columnVolt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrossSectionDataTable() {
                this.TableName = "CrossSection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrossSectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CrossSectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromColumn {
                get {
                    return this.columnFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToColumn {
                get {
                    return this.columnTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameExistColumn {
                get {
                    return this.columnNameExist;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LenghtColumn {
                get {
                    return this.columnLenght;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameCommentColumn {
                get {
                    return this.columnNameComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrossSectionColumn {
                get {
                    return this.columnCrossSection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentColumn {
                get {
                    return this.columnCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoltColumn {
                get {
                    return this.columnVolt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrossSectionRow this[int index] {
                get {
                    return ((CrossSectionRow)(this.Rows[index]));
                }
            }
            
            public event CrossSectionRowChangeEventHandler CrossSectionRowChanging;
            
            public event CrossSectionRowChangeEventHandler CrossSectionRowChanged;
            
            public event CrossSectionRowChangeEventHandler CrossSectionRowDeleting;
            
            public event CrossSectionRowChangeEventHandler CrossSectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCrossSectionRow(CrossSectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrossSectionRow AddCrossSectionRow(string From, string To, string NameExist, string Lenght, string NameComment, string CrossSection, string Current, string Volt) {
                CrossSectionRow rowCrossSectionRow = ((CrossSectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        From,
                        To,
                        NameExist,
                        Lenght,
                        NameComment,
                        CrossSection,
                        Current,
                        Volt};
                rowCrossSectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCrossSectionRow);
                return rowCrossSectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CrossSectionDataTable cln = ((CrossSectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CrossSectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFrom = base.Columns["From"];
                this.columnTo = base.Columns["To"];
                this.columnNameExist = base.Columns["NameExist"];
                this.columnLenght = base.Columns["Lenght"];
                this.columnNameComment = base.Columns["NameComment"];
                this.columnCrossSection = base.Columns["CrossSection"];
                this.columnCurrent = base.Columns["Current"];
                this.columnVolt = base.Columns["Volt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFrom = new global::System.Data.DataColumn("From", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrom);
                this.columnTo = new global::System.Data.DataColumn("To", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTo);
                this.columnNameExist = new global::System.Data.DataColumn("NameExist", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameExist);
                this.columnLenght = new global::System.Data.DataColumn("Lenght", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLenght);
                this.columnNameComment = new global::System.Data.DataColumn("NameComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameComment);
                this.columnCrossSection = new global::System.Data.DataColumn("CrossSection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrossSection);
                this.columnCurrent = new global::System.Data.DataColumn("Current", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrent);
                this.columnVolt = new global::System.Data.DataColumn("Volt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVolt);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrossSectionRow NewCrossSectionRow() {
                return ((CrossSectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CrossSectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CrossSectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CrossSectionRowChanged != null)) {
                    this.CrossSectionRowChanged(this, new CrossSectionRowChangeEvent(((CrossSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CrossSectionRowChanging != null)) {
                    this.CrossSectionRowChanging(this, new CrossSectionRowChangeEvent(((CrossSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CrossSectionRowDeleted != null)) {
                    this.CrossSectionRowDeleted(this, new CrossSectionRowChangeEvent(((CrossSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CrossSectionRowDeleting != null)) {
                    this.CrossSectionRowDeleting(this, new CrossSectionRowChangeEvent(((CrossSectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCrossSectionRow(CrossSectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CrossSectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InputInfoTranseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnLoad;
            
            private global::System.Data.DataColumn columnResult;
            
            private global::System.Data.DataColumn columnPowerLoss;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InputInfoTranseDataTable() {
                this.TableName = "InputInfoTranse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InputInfoTranseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InputInfoTranseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadColumn {
                get {
                    return this.columnLoad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultColumn {
                get {
                    return this.columnResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PowerLossColumn {
                get {
                    return this.columnPowerLoss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InputInfoTranseRow this[int index] {
                get {
                    return ((InputInfoTranseRow)(this.Rows[index]));
                }
            }
            
            public event InputInfoTranseRowChangeEventHandler InputInfoTranseRowChanging;
            
            public event InputInfoTranseRowChangeEventHandler InputInfoTranseRowChanged;
            
            public event InputInfoTranseRowChangeEventHandler InputInfoTranseRowDeleting;
            
            public event InputInfoTranseRowChangeEventHandler InputInfoTranseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInputInfoTranseRow(InputInfoTranseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InputInfoTranseRow AddInputInfoTranseRow(string Height, string Load, string Result, string PowerLoss) {
                InputInfoTranseRow rowInputInfoTranseRow = ((InputInfoTranseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Height,
                        Load,
                        Result,
                        PowerLoss};
                rowInputInfoTranseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInputInfoTranseRow);
                return rowInputInfoTranseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InputInfoTranseDataTable cln = ((InputInfoTranseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InputInfoTranseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHeight = base.Columns["Height"];
                this.columnLoad = base.Columns["Load"];
                this.columnResult = base.Columns["Result"];
                this.columnPowerLoss = base.Columns["PowerLoss"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnLoad = new global::System.Data.DataColumn("Load", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoad);
                this.columnResult = new global::System.Data.DataColumn("Result", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult);
                this.columnPowerLoss = new global::System.Data.DataColumn("PowerLoss", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPowerLoss);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InputInfoTranseRow NewInputInfoTranseRow() {
                return ((InputInfoTranseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InputInfoTranseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InputInfoTranseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InputInfoTranseRowChanged != null)) {
                    this.InputInfoTranseRowChanged(this, new InputInfoTranseRowChangeEvent(((InputInfoTranseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InputInfoTranseRowChanging != null)) {
                    this.InputInfoTranseRowChanging(this, new InputInfoTranseRowChangeEvent(((InputInfoTranseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InputInfoTranseRowDeleted != null)) {
                    this.InputInfoTranseRowDeleted(this, new InputInfoTranseRowChangeEvent(((InputInfoTranseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InputInfoTranseRowDeleting != null)) {
                    this.InputInfoTranseRowDeleting(this, new InputInfoTranseRowChangeEvent(((InputInfoTranseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInputInfoTranseRow(InputInfoTranseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InputInfoTranseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoadCurrentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnI;
            
            private global::System.Data.DataColumn columnPF;
            
            private global::System.Data.DataColumn columnCount;
            
            private global::System.Data.DataColumn columnCF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadCurrentDataTable() {
                this.TableName = "LoadCurrent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadCurrentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LoadCurrentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IColumn {
                get {
                    return this.columnI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFColumn {
                get {
                    return this.columnPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CFColumn {
                get {
                    return this.columnCF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadCurrentRow this[int index] {
                get {
                    return ((LoadCurrentRow)(this.Rows[index]));
                }
            }
            
            public event LoadCurrentRowChangeEventHandler LoadCurrentRowChanging;
            
            public event LoadCurrentRowChangeEventHandler LoadCurrentRowChanged;
            
            public event LoadCurrentRowChangeEventHandler LoadCurrentRowDeleting;
            
            public event LoadCurrentRowChangeEventHandler LoadCurrentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoadCurrentRow(LoadCurrentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadCurrentRow AddLoadCurrentRow(string I, string PF, string Count, string CF) {
                LoadCurrentRow rowLoadCurrentRow = ((LoadCurrentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        I,
                        PF,
                        Count,
                        CF};
                rowLoadCurrentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLoadCurrentRow);
                return rowLoadCurrentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LoadCurrentDataTable cln = ((LoadCurrentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LoadCurrentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnI = base.Columns["I"];
                this.columnPF = base.Columns["PF"];
                this.columnCount = base.Columns["Count"];
                this.columnCF = base.Columns["CF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnI = new global::System.Data.DataColumn("I", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnI);
                this.columnPF = new global::System.Data.DataColumn("PF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnCF = new global::System.Data.DataColumn("CF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCF);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadCurrentRow NewLoadCurrentRow() {
                return ((LoadCurrentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LoadCurrentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LoadCurrentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoadCurrentRowChanged != null)) {
                    this.LoadCurrentRowChanged(this, new LoadCurrentRowChangeEvent(((LoadCurrentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoadCurrentRowChanging != null)) {
                    this.LoadCurrentRowChanging(this, new LoadCurrentRowChangeEvent(((LoadCurrentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoadCurrentRowDeleted != null)) {
                    this.LoadCurrentRowDeleted(this, new LoadCurrentRowChangeEvent(((LoadCurrentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoadCurrentRowDeleting != null)) {
                    this.LoadCurrentRowDeleting(this, new LoadCurrentRowChangeEvent(((LoadCurrentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoadCurrentRow(LoadCurrentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoadCurrentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoadPowerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnP;
            
            private global::System.Data.DataColumn columnPF;
            
            private global::System.Data.DataColumn columnCount;
            
            private global::System.Data.DataColumn columnCF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadPowerDataTable() {
                this.TableName = "LoadPower";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadPowerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LoadPowerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PColumn {
                get {
                    return this.columnP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFColumn {
                get {
                    return this.columnPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CFColumn {
                get {
                    return this.columnCF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadPowerRow this[int index] {
                get {
                    return ((LoadPowerRow)(this.Rows[index]));
                }
            }
            
            public event LoadPowerRowChangeEventHandler LoadPowerRowChanging;
            
            public event LoadPowerRowChangeEventHandler LoadPowerRowChanged;
            
            public event LoadPowerRowChangeEventHandler LoadPowerRowDeleting;
            
            public event LoadPowerRowChangeEventHandler LoadPowerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoadPowerRow(LoadPowerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadPowerRow AddLoadPowerRow(string P, string PF, string Count, string CF) {
                LoadPowerRow rowLoadPowerRow = ((LoadPowerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        P,
                        PF,
                        Count,
                        CF};
                rowLoadPowerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLoadPowerRow);
                return rowLoadPowerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LoadPowerDataTable cln = ((LoadPowerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LoadPowerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnP = base.Columns["P"];
                this.columnPF = base.Columns["PF"];
                this.columnCount = base.Columns["Count"];
                this.columnCF = base.Columns["CF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnP = new global::System.Data.DataColumn("P", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP);
                this.columnPF = new global::System.Data.DataColumn("PF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnCF = new global::System.Data.DataColumn("CF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCF);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadPowerRow NewLoadPowerRow() {
                return ((LoadPowerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LoadPowerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LoadPowerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoadPowerRowChanged != null)) {
                    this.LoadPowerRowChanged(this, new LoadPowerRowChangeEvent(((LoadPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoadPowerRowChanging != null)) {
                    this.LoadPowerRowChanging(this, new LoadPowerRowChangeEvent(((LoadPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoadPowerRowDeleted != null)) {
                    this.LoadPowerRowDeleted(this, new LoadPowerRowChangeEvent(((LoadPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoadPowerRowDeleting != null)) {
                    this.LoadPowerRowDeleting(this, new LoadPowerRowChangeEvent(((LoadPowerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoadPowerRow(LoadPowerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoadPowerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoadBranchDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBranchName;
            
            private global::System.Data.DataColumn columnI;
            
            private global::System.Data.DataColumn columnPF;
            
            private global::System.Data.DataColumn columnBranchCount;
            
            private global::System.Data.DataColumn columnPhuseCount;
            
            private global::System.Data.DataColumn columnCF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadBranchDataTable() {
                this.TableName = "LoadBranch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadBranchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LoadBranchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchNameColumn {
                get {
                    return this.columnBranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IColumn {
                get {
                    return this.columnI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFColumn {
                get {
                    return this.columnPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchCountColumn {
                get {
                    return this.columnBranchCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhuseCountColumn {
                get {
                    return this.columnPhuseCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CFColumn {
                get {
                    return this.columnCF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadBranchRow this[int index] {
                get {
                    return ((LoadBranchRow)(this.Rows[index]));
                }
            }
            
            public event LoadBranchRowChangeEventHandler LoadBranchRowChanging;
            
            public event LoadBranchRowChangeEventHandler LoadBranchRowChanged;
            
            public event LoadBranchRowChangeEventHandler LoadBranchRowDeleting;
            
            public event LoadBranchRowChangeEventHandler LoadBranchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoadBranchRow(LoadBranchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadBranchRow AddLoadBranchRow(string BranchName, string I, string PF, string BranchCount, string PhuseCount, string CF) {
                LoadBranchRow rowLoadBranchRow = ((LoadBranchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BranchName,
                        I,
                        PF,
                        BranchCount,
                        PhuseCount,
                        CF};
                rowLoadBranchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLoadBranchRow);
                return rowLoadBranchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LoadBranchDataTable cln = ((LoadBranchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LoadBranchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBranchName = base.Columns["BranchName"];
                this.columnI = base.Columns["I"];
                this.columnPF = base.Columns["PF"];
                this.columnBranchCount = base.Columns["BranchCount"];
                this.columnPhuseCount = base.Columns["PhuseCount"];
                this.columnCF = base.Columns["CF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBranchName = new global::System.Data.DataColumn("BranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchName);
                this.columnI = new global::System.Data.DataColumn("I", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnI);
                this.columnPF = new global::System.Data.DataColumn("PF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF);
                this.columnBranchCount = new global::System.Data.DataColumn("BranchCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchCount);
                this.columnPhuseCount = new global::System.Data.DataColumn("PhuseCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhuseCount);
                this.columnCF = new global::System.Data.DataColumn("CF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCF);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadBranchRow NewLoadBranchRow() {
                return ((LoadBranchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LoadBranchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LoadBranchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoadBranchRowChanged != null)) {
                    this.LoadBranchRowChanged(this, new LoadBranchRowChangeEvent(((LoadBranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoadBranchRowChanging != null)) {
                    this.LoadBranchRowChanging(this, new LoadBranchRowChangeEvent(((LoadBranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoadBranchRowDeleted != null)) {
                    this.LoadBranchRowDeleted(this, new LoadBranchRowChangeEvent(((LoadBranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoadBranchRowDeleting != null)) {
                    this.LoadBranchRowDeleting(this, new LoadBranchRowChangeEvent(((LoadBranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoadBranchRow(LoadBranchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoadBranchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RemarkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemarkDataTable() {
                this.TableName = "Remark";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemarkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RemarkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileColumn {
                get {
                    return this.columnFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemarkRow this[int index] {
                get {
                    return ((RemarkRow)(this.Rows[index]));
                }
            }
            
            public event RemarkRowChangeEventHandler RemarkRowChanging;
            
            public event RemarkRowChangeEventHandler RemarkRowChanged;
            
            public event RemarkRowChangeEventHandler RemarkRowDeleting;
            
            public event RemarkRowChangeEventHandler RemarkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRemarkRow(RemarkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemarkRow AddRemarkRow(byte[] File) {
                RemarkRow rowRemarkRow = ((RemarkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        File};
                rowRemarkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRemarkRow);
                return rowRemarkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RemarkDataTable cln = ((RemarkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RemarkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFile = base.Columns["File"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFile = new global::System.Data.DataColumn("File", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFile);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemarkRow NewRemarkRow() {
                return ((RemarkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RemarkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RemarkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RemarkRowChanged != null)) {
                    this.RemarkRowChanged(this, new RemarkRowChangeEvent(((RemarkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RemarkRowChanging != null)) {
                    this.RemarkRowChanging(this, new RemarkRowChangeEvent(((RemarkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RemarkRowDeleted != null)) {
                    this.RemarkRowDeleted(this, new RemarkRowChangeEvent(((RemarkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RemarkRowDeleting != null)) {
                    this.RemarkRowDeleting(this, new RemarkRowChangeEvent(((RemarkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRemarkRow(RemarkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RemarkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RudSurfaceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionNumber;
            
            private global::System.Data.DataColumn columnPoleNumber;
            
            private global::System.Data.DataColumn columnNormal;
            
            private global::System.Data.DataColumn columnIce;
            
            private global::System.Data.DataColumn columnWind;
            
            private global::System.Data.DataColumn columnMaxTemp;
            
            private global::System.Data.DataColumn columnMinTemp;
            
            private global::System.Data.DataColumn columnIceWind;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RudSurfaceDataTable() {
                this.TableName = "RudSurface";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RudSurfaceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RudSurfaceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoleNumberColumn {
                get {
                    return this.columnPoleNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NormalColumn {
                get {
                    return this.columnNormal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IceColumn {
                get {
                    return this.columnIce;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindColumn {
                get {
                    return this.columnWind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxTempColumn {
                get {
                    return this.columnMaxTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinTempColumn {
                get {
                    return this.columnMinTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IceWindColumn {
                get {
                    return this.columnIceWind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RudSurfaceRow this[int index] {
                get {
                    return ((RudSurfaceRow)(this.Rows[index]));
                }
            }
            
            public event RudSurfaceRowChangeEventHandler RudSurfaceRowChanging;
            
            public event RudSurfaceRowChangeEventHandler RudSurfaceRowChanged;
            
            public event RudSurfaceRowChangeEventHandler RudSurfaceRowDeleting;
            
            public event RudSurfaceRowChangeEventHandler RudSurfaceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRudSurfaceRow(RudSurfaceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RudSurfaceRow AddRudSurfaceRow(string SectionNumber, string PoleNumber, string Normal, string Ice, string Wind, string MaxTemp, string MinTemp, string IceWind) {
                RudSurfaceRow rowRudSurfaceRow = ((RudSurfaceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionNumber,
                        PoleNumber,
                        Normal,
                        Ice,
                        Wind,
                        MaxTemp,
                        MinTemp,
                        IceWind};
                rowRudSurfaceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRudSurfaceRow);
                return rowRudSurfaceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RudSurfaceDataTable cln = ((RudSurfaceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RudSurfaceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionNumber = base.Columns["SectionNumber"];
                this.columnPoleNumber = base.Columns["PoleNumber"];
                this.columnNormal = base.Columns["Normal"];
                this.columnIce = base.Columns["Ice"];
                this.columnWind = base.Columns["Wind"];
                this.columnMaxTemp = base.Columns["MaxTemp"];
                this.columnMinTemp = base.Columns["MinTemp"];
                this.columnIceWind = base.Columns["IceWind"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionNumber = new global::System.Data.DataColumn("SectionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionNumber);
                this.columnPoleNumber = new global::System.Data.DataColumn("PoleNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoleNumber);
                this.columnNormal = new global::System.Data.DataColumn("Normal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormal);
                this.columnIce = new global::System.Data.DataColumn("Ice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIce);
                this.columnWind = new global::System.Data.DataColumn("Wind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWind);
                this.columnMaxTemp = new global::System.Data.DataColumn("MaxTemp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxTemp);
                this.columnMinTemp = new global::System.Data.DataColumn("MinTemp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinTemp);
                this.columnIceWind = new global::System.Data.DataColumn("IceWind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIceWind);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RudSurfaceRow NewRudSurfaceRow() {
                return ((RudSurfaceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RudSurfaceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RudSurfaceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RudSurfaceRowChanged != null)) {
                    this.RudSurfaceRowChanged(this, new RudSurfaceRowChangeEvent(((RudSurfaceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RudSurfaceRowChanging != null)) {
                    this.RudSurfaceRowChanging(this, new RudSurfaceRowChangeEvent(((RudSurfaceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RudSurfaceRowDeleted != null)) {
                    this.RudSurfaceRowDeleted(this, new RudSurfaceRowChangeEvent(((RudSurfaceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RudSurfaceRowDeleting != null)) {
                    this.RudSurfaceRowDeleting(this, new RudSurfaceRowChangeEvent(((RudSurfaceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRudSurfaceRow(RudSurfaceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RudSurfaceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PoleWithHalterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionNumber;
            
            private global::System.Data.DataColumn columnPoleNum;
            
            private global::System.Data.DataColumn columnPower;
            
            private global::System.Data.DataColumn columnCount;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnHalterPower;
            
            private global::System.Data.DataColumn columnHalterCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithHalterDataTable() {
                this.TableName = "PoleWithHalter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoleWithHalterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PoleWithHalterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoleNumColumn {
                get {
                    return this.columnPoleNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PowerColumn {
                get {
                    return this.columnPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HalterPowerColumn {
                get {
                    return this.columnHalterPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HalterCountColumn {
                get {
                    return this.columnHalterCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithHalterRow this[int index] {
                get {
                    return ((PoleWithHalterRow)(this.Rows[index]));
                }
            }
            
            public event PoleWithHalterRowChangeEventHandler PoleWithHalterRowChanging;
            
            public event PoleWithHalterRowChangeEventHandler PoleWithHalterRowChanged;
            
            public event PoleWithHalterRowChangeEventHandler PoleWithHalterRowDeleting;
            
            public event PoleWithHalterRowChangeEventHandler PoleWithHalterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPoleWithHalterRow(PoleWithHalterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithHalterRow AddPoleWithHalterRow(string SectionNumber, string PoleNum, string Power, string Count, string Name, string HalterPower, string HalterCount) {
                PoleWithHalterRow rowPoleWithHalterRow = ((PoleWithHalterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionNumber,
                        PoleNum,
                        Power,
                        Count,
                        Name,
                        HalterPower,
                        HalterCount};
                rowPoleWithHalterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPoleWithHalterRow);
                return rowPoleWithHalterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PoleWithHalterDataTable cln = ((PoleWithHalterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PoleWithHalterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionNumber = base.Columns["SectionNumber"];
                this.columnPoleNum = base.Columns["PoleNum"];
                this.columnPower = base.Columns["Power"];
                this.columnCount = base.Columns["Count"];
                this.columnName = base.Columns["Name"];
                this.columnHalterPower = base.Columns["HalterPower"];
                this.columnHalterCount = base.Columns["HalterCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionNumber = new global::System.Data.DataColumn("SectionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionNumber);
                this.columnPoleNum = new global::System.Data.DataColumn("PoleNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoleNum);
                this.columnPower = new global::System.Data.DataColumn("Power", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPower);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnHalterPower = new global::System.Data.DataColumn("HalterPower", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHalterPower);
                this.columnHalterCount = new global::System.Data.DataColumn("HalterCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHalterCount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithHalterRow NewPoleWithHalterRow() {
                return ((PoleWithHalterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PoleWithHalterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PoleWithHalterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PoleWithHalterRowChanged != null)) {
                    this.PoleWithHalterRowChanged(this, new PoleWithHalterRowChangeEvent(((PoleWithHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PoleWithHalterRowChanging != null)) {
                    this.PoleWithHalterRowChanging(this, new PoleWithHalterRowChangeEvent(((PoleWithHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PoleWithHalterRowDeleted != null)) {
                    this.PoleWithHalterRowDeleted(this, new PoleWithHalterRowChangeEvent(((PoleWithHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PoleWithHalterRowDeleting != null)) {
                    this.PoleWithHalterRowDeleting(this, new PoleWithHalterRowChangeEvent(((PoleWithHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePoleWithHalterRow(PoleWithHalterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PoleWithHalterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PoleWithOutHalterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSectionNumber;
            
            private global::System.Data.DataColumn columnPoleNum;
            
            private global::System.Data.DataColumn columnPower;
            
            private global::System.Data.DataColumn columnCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithOutHalterDataTable() {
                this.TableName = "PoleWithOutHalter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoleWithOutHalterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PoleWithOutHalterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionNumberColumn {
                get {
                    return this.columnSectionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoleNumColumn {
                get {
                    return this.columnPoleNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PowerColumn {
                get {
                    return this.columnPower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithOutHalterRow this[int index] {
                get {
                    return ((PoleWithOutHalterRow)(this.Rows[index]));
                }
            }
            
            public event PoleWithOutHalterRowChangeEventHandler PoleWithOutHalterRowChanging;
            
            public event PoleWithOutHalterRowChangeEventHandler PoleWithOutHalterRowChanged;
            
            public event PoleWithOutHalterRowChangeEventHandler PoleWithOutHalterRowDeleting;
            
            public event PoleWithOutHalterRowChangeEventHandler PoleWithOutHalterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPoleWithOutHalterRow(PoleWithOutHalterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithOutHalterRow AddPoleWithOutHalterRow(string SectionNumber, string PoleNum, string Power, string Count) {
                PoleWithOutHalterRow rowPoleWithOutHalterRow = ((PoleWithOutHalterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SectionNumber,
                        PoleNum,
                        Power,
                        Count};
                rowPoleWithOutHalterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPoleWithOutHalterRow);
                return rowPoleWithOutHalterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PoleWithOutHalterDataTable cln = ((PoleWithOutHalterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PoleWithOutHalterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectionNumber = base.Columns["SectionNumber"];
                this.columnPoleNum = base.Columns["PoleNum"];
                this.columnPower = base.Columns["Power"];
                this.columnCount = base.Columns["Count"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectionNumber = new global::System.Data.DataColumn("SectionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionNumber);
                this.columnPoleNum = new global::System.Data.DataColumn("PoleNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoleNum);
                this.columnPower = new global::System.Data.DataColumn("Power", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPower);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithOutHalterRow NewPoleWithOutHalterRow() {
                return ((PoleWithOutHalterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PoleWithOutHalterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PoleWithOutHalterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PoleWithOutHalterRowChanged != null)) {
                    this.PoleWithOutHalterRowChanged(this, new PoleWithOutHalterRowChangeEvent(((PoleWithOutHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PoleWithOutHalterRowChanging != null)) {
                    this.PoleWithOutHalterRowChanging(this, new PoleWithOutHalterRowChangeEvent(((PoleWithOutHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PoleWithOutHalterRowDeleted != null)) {
                    this.PoleWithOutHalterRowDeleted(this, new PoleWithOutHalterRowChangeEvent(((PoleWithOutHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PoleWithOutHalterRowDeleting != null)) {
                    this.PoleWithOutHalterRowDeleting(this, new PoleWithOutHalterRowChangeEvent(((PoleWithOutHalterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePoleWithOutHalterRow(PoleWithOutHalterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PoleWithOutHalterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StatusReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnCount;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnPrice;
            
            private global::System.Data.DataColumn columnExecutePrice;
            
            private global::System.Data.DataColumn columnWagePrice;
            
            private global::System.Data.DataColumn columnExist;
            
            private global::System.Data.DataColumn columnProjectCode;
            
            private global::System.Data.DataColumn columnTotal;
            
            private global::System.Data.DataColumn columnAreaCoeff;
            
            private global::System.Data.DataColumn columnSum;
            
            private global::System.Data.DataColumn columnProjectName1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusReportDataTable() {
                this.TableName = "StatusReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatusReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StatusReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutePriceColumn {
                get {
                    return this.columnExecutePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WagePriceColumn {
                get {
                    return this.columnWagePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExistColumn {
                get {
                    return this.columnExist;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectCodeColumn {
                get {
                    return this.columnProjectCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaCoeffColumn {
                get {
                    return this.columnAreaCoeff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumColumn {
                get {
                    return this.columnSum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectName1Column {
                get {
                    return this.columnProjectName1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusReportRow this[int index] {
                get {
                    return ((StatusReportRow)(this.Rows[index]));
                }
            }
            
            public event StatusReportRowChangeEventHandler StatusReportRowChanging;
            
            public event StatusReportRowChangeEventHandler StatusReportRowChanged;
            
            public event StatusReportRowChangeEventHandler StatusReportRowDeleting;
            
            public event StatusReportRowChangeEventHandler StatusReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStatusReportRow(StatusReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusReportRow AddStatusReportRow(string Code, string Name, string Count, string Unit, string Price, string ExecutePrice, string WagePrice, string Exist, string ProjectCode, long Total, string AreaCoeff, string Sum, string ProjectName1) {
                StatusReportRow rowStatusReportRow = ((StatusReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Code,
                        Name,
                        Count,
                        Unit,
                        Price,
                        ExecutePrice,
                        WagePrice,
                        Exist,
                        ProjectCode,
                        Total,
                        AreaCoeff,
                        Sum,
                        ProjectName1};
                rowStatusReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStatusReportRow);
                return rowStatusReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StatusReportDataTable cln = ((StatusReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StatusReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCode = base.Columns["Code"];
                this.columnName = base.Columns["Name"];
                this.columnCount = base.Columns["Count"];
                this.columnUnit = base.Columns["Unit"];
                this.columnPrice = base.Columns["Price"];
                this.columnExecutePrice = base.Columns["ExecutePrice"];
                this.columnWagePrice = base.Columns["WagePrice"];
                this.columnExist = base.Columns["Exist"];
                this.columnProjectCode = base.Columns["ProjectCode"];
                this.columnTotal = base.Columns["Total"];
                this.columnAreaCoeff = base.Columns["AreaCoeff"];
                this.columnSum = base.Columns["Sum"];
                this.columnProjectName1 = base.Columns["ProjectName1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnPrice = new global::System.Data.DataColumn("Price", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnExecutePrice = new global::System.Data.DataColumn("ExecutePrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutePrice);
                this.columnWagePrice = new global::System.Data.DataColumn("WagePrice", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWagePrice);
                this.columnExist = new global::System.Data.DataColumn("Exist", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExist);
                this.columnProjectCode = new global::System.Data.DataColumn("ProjectCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectCode);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnAreaCoeff = new global::System.Data.DataColumn("AreaCoeff", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaCoeff);
                this.columnSum = new global::System.Data.DataColumn("Sum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSum);
                this.columnProjectName1 = new global::System.Data.DataColumn("ProjectName1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName1);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusReportRow NewStatusReportRow() {
                return ((StatusReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StatusReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StatusReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StatusReportRowChanged != null)) {
                    this.StatusReportRowChanged(this, new StatusReportRowChangeEvent(((StatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StatusReportRowChanging != null)) {
                    this.StatusReportRowChanging(this, new StatusReportRowChangeEvent(((StatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StatusReportRowDeleted != null)) {
                    this.StatusReportRowDeleted(this, new StatusReportRowChangeEvent(((StatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StatusReportRowDeleting != null)) {
                    this.StatusReportRowDeleting(this, new StatusReportRowChangeEvent(((StatusReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStatusReportRow(StatusReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StatusReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AirPostDiagramDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnImage;
            
            private global::System.Data.DataColumn columnCapacity;
            
            private global::System.Data.DataColumn columnXCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AirPostDiagramDataTable() {
                this.TableName = "AirPostDiagram";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AirPostDiagramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AirPostDiagramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapacityColumn {
                get {
                    return this.columnCapacity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XCodeColumn {
                get {
                    return this.columnXCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AirPostDiagramRow this[int index] {
                get {
                    return ((AirPostDiagramRow)(this.Rows[index]));
                }
            }
            
            public event AirPostDiagramRowChangeEventHandler AirPostDiagramRowChanging;
            
            public event AirPostDiagramRowChangeEventHandler AirPostDiagramRowChanged;
            
            public event AirPostDiagramRowChangeEventHandler AirPostDiagramRowDeleting;
            
            public event AirPostDiagramRowChangeEventHandler AirPostDiagramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAirPostDiagramRow(AirPostDiagramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AirPostDiagramRow AddAirPostDiagramRow(string Name, byte[] Image, double Capacity, string XCode) {
                AirPostDiagramRow rowAirPostDiagramRow = ((AirPostDiagramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Image,
                        Capacity,
                        XCode};
                rowAirPostDiagramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAirPostDiagramRow);
                return rowAirPostDiagramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AirPostDiagramDataTable cln = ((AirPostDiagramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AirPostDiagramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnImage = base.Columns["Image"];
                this.columnCapacity = base.Columns["Capacity"];
                this.columnXCode = base.Columns["XCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnImage = new global::System.Data.DataColumn("Image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.columnCapacity = new global::System.Data.DataColumn("Capacity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapacity);
                this.columnXCode = new global::System.Data.DataColumn("XCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AirPostDiagramRow NewAirPostDiagramRow() {
                return ((AirPostDiagramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AirPostDiagramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AirPostDiagramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AirPostDiagramRowChanged != null)) {
                    this.AirPostDiagramRowChanged(this, new AirPostDiagramRowChangeEvent(((AirPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AirPostDiagramRowChanging != null)) {
                    this.AirPostDiagramRowChanging(this, new AirPostDiagramRowChangeEvent(((AirPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AirPostDiagramRowDeleted != null)) {
                    this.AirPostDiagramRowDeleted(this, new AirPostDiagramRowChangeEvent(((AirPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AirPostDiagramRowDeleting != null)) {
                    this.AirPostDiagramRowDeleting(this, new AirPostDiagramRowChangeEvent(((AirPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAirPostDiagramRow(AirPostDiagramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AirPostDiagramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroundPostDiagramDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnImage;
            
            private global::System.Data.DataColumn columnCapacity;
            
            private global::System.Data.DataColumn columnXCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroundPostDiagramDataTable() {
                this.TableName = "GroundPostDiagram";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroundPostDiagramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroundPostDiagramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapacityColumn {
                get {
                    return this.columnCapacity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XCodeColumn {
                get {
                    return this.columnXCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroundPostDiagramRow this[int index] {
                get {
                    return ((GroundPostDiagramRow)(this.Rows[index]));
                }
            }
            
            public event GroundPostDiagramRowChangeEventHandler GroundPostDiagramRowChanging;
            
            public event GroundPostDiagramRowChangeEventHandler GroundPostDiagramRowChanged;
            
            public event GroundPostDiagramRowChangeEventHandler GroundPostDiagramRowDeleting;
            
            public event GroundPostDiagramRowChangeEventHandler GroundPostDiagramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroundPostDiagramRow(GroundPostDiagramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroundPostDiagramRow AddGroundPostDiagramRow(string Name, byte[] Image, double Capacity, string XCode) {
                GroundPostDiagramRow rowGroundPostDiagramRow = ((GroundPostDiagramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Image,
                        Capacity,
                        XCode};
                rowGroundPostDiagramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGroundPostDiagramRow);
                return rowGroundPostDiagramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GroundPostDiagramDataTable cln = ((GroundPostDiagramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GroundPostDiagramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnImage = base.Columns["Image"];
                this.columnCapacity = base.Columns["Capacity"];
                this.columnXCode = base.Columns["XCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnImage = new global::System.Data.DataColumn("Image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.columnCapacity = new global::System.Data.DataColumn("Capacity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapacity);
                this.columnXCode = new global::System.Data.DataColumn("XCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroundPostDiagramRow NewGroundPostDiagramRow() {
                return ((GroundPostDiagramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GroundPostDiagramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GroundPostDiagramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroundPostDiagramRowChanged != null)) {
                    this.GroundPostDiagramRowChanged(this, new GroundPostDiagramRowChangeEvent(((GroundPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroundPostDiagramRowChanging != null)) {
                    this.GroundPostDiagramRowChanging(this, new GroundPostDiagramRowChangeEvent(((GroundPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroundPostDiagramRowDeleted != null)) {
                    this.GroundPostDiagramRowDeleted(this, new GroundPostDiagramRowChangeEvent(((GroundPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroundPostDiagramRowDeleting != null)) {
                    this.GroundPostDiagramRowDeleting(this, new GroundPostDiagramRowChangeEvent(((GroundPostDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroundPostDiagramRow(GroundPostDiagramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroundPostDiagramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsolDiagramDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnImage;
            
            private global::System.Data.DataColumn columnXCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsolDiagramDataTable() {
                this.TableName = "ConsolDiagram";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsolDiagramDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConsolDiagramDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageColumn {
                get {
                    return this.columnImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XCodeColumn {
                get {
                    return this.columnXCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsolDiagramRow this[int index] {
                get {
                    return ((ConsolDiagramRow)(this.Rows[index]));
                }
            }
            
            public event ConsolDiagramRowChangeEventHandler ConsolDiagramRowChanging;
            
            public event ConsolDiagramRowChangeEventHandler ConsolDiagramRowChanged;
            
            public event ConsolDiagramRowChangeEventHandler ConsolDiagramRowDeleting;
            
            public event ConsolDiagramRowChangeEventHandler ConsolDiagramRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsolDiagramRow(ConsolDiagramRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsolDiagramRow AddConsolDiagramRow(string Name, byte[] Image, string XCode) {
                ConsolDiagramRow rowConsolDiagramRow = ((ConsolDiagramRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Image,
                        XCode};
                rowConsolDiagramRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsolDiagramRow);
                return rowConsolDiagramRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsolDiagramDataTable cln = ((ConsolDiagramDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsolDiagramDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnImage = base.Columns["Image"];
                this.columnXCode = base.Columns["XCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnImage = new global::System.Data.DataColumn("Image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImage);
                this.columnXCode = new global::System.Data.DataColumn("XCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsolDiagramRow NewConsolDiagramRow() {
                return ((ConsolDiagramRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsolDiagramRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsolDiagramRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsolDiagramRowChanged != null)) {
                    this.ConsolDiagramRowChanged(this, new ConsolDiagramRowChangeEvent(((ConsolDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsolDiagramRowChanging != null)) {
                    this.ConsolDiagramRowChanging(this, new ConsolDiagramRowChangeEvent(((ConsolDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsolDiagramRowDeleted != null)) {
                    this.ConsolDiagramRowDeleted(this, new ConsolDiagramRowChangeEvent(((ConsolDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsolDiagramRowDeleting != null)) {
                    this.ConsolDiagramRowDeleting(this, new ConsolDiagramRowChangeEvent(((ConsolDiagramRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsolDiagramRow(ConsolDiagramRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsolDiagramDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnPage;
            
            private global::System.Data.DataColumn columnBookMark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentDataTable() {
                this.TableName = "Content";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PageColumn {
                get {
                    return this.columnPage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookMarkColumn {
                get {
                    return this.columnBookMark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentRow this[int index] {
                get {
                    return ((ContentRow)(this.Rows[index]));
                }
            }
            
            public event ContentRowChangeEventHandler ContentRowChanging;
            
            public event ContentRowChangeEventHandler ContentRowChanged;
            
            public event ContentRowChangeEventHandler ContentRowDeleting;
            
            public event ContentRowChangeEventHandler ContentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContentRow(ContentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentRow AddContentRow(string Name, string Page, string BookMark) {
                ContentRow rowContentRow = ((ContentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        Page,
                        BookMark};
                rowContentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContentRow);
                return rowContentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContentDataTable cln = ((ContentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnPage = base.Columns["Page"];
                this.columnBookMark = base.Columns["BookMark"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPage = new global::System.Data.DataColumn("Page", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPage);
                this.columnBookMark = new global::System.Data.DataColumn("BookMark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookMark);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentRow NewContentRow() {
                return ((ContentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContentRowChanged != null)) {
                    this.ContentRowChanged(this, new ContentRowChangeEvent(((ContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContentRowChanging != null)) {
                    this.ContentRowChanging(this, new ContentRowChangeEvent(((ContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContentRowDeleted != null)) {
                    this.ContentRowDeleted(this, new ContentRowChangeEvent(((ContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContentRowDeleting != null)) {
                    this.ContentRowDeleting(this, new ContentRowChangeEvent(((ContentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContentRow(ContentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DesignProfileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDesignCode;
            
            private global::System.Data.DataColumn columnDesignName;
            
            private global::System.Data.DataColumn columnScale;
            
            private global::System.Data.DataColumn columnDesignDate;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnZone;
            
            private global::System.Data.DataColumn columnValidate;
            
            private global::System.Data.DataColumn columnEmployer;
            
            private global::System.Data.DataColumn columnAdviser;
            
            private global::System.Data.DataColumn columnDesigner;
            
            private global::System.Data.DataColumn columnController;
            
            private global::System.Data.DataColumn columnSupporter;
            
            private global::System.Data.DataColumn columnApproval;
            
            private global::System.Data.DataColumn columnPlanner;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DesignProfileDataTable() {
                this.TableName = "DesignProfile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DesignProfileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DesignProfileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignCodeColumn {
                get {
                    return this.columnDesignCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignNameColumn {
                get {
                    return this.columnDesignName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaleColumn {
                get {
                    return this.columnScale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignDateColumn {
                get {
                    return this.columnDesignDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneColumn {
                get {
                    return this.columnZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidateColumn {
                get {
                    return this.columnValidate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployerColumn {
                get {
                    return this.columnEmployer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdviserColumn {
                get {
                    return this.columnAdviser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignerColumn {
                get {
                    return this.columnDesigner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ControllerColumn {
                get {
                    return this.columnController;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupporterColumn {
                get {
                    return this.columnSupporter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovalColumn {
                get {
                    return this.columnApproval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlannerColumn {
                get {
                    return this.columnPlanner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DesignProfileRow this[int index] {
                get {
                    return ((DesignProfileRow)(this.Rows[index]));
                }
            }
            
            public event DesignProfileRowChangeEventHandler DesignProfileRowChanging;
            
            public event DesignProfileRowChangeEventHandler DesignProfileRowChanged;
            
            public event DesignProfileRowChangeEventHandler DesignProfileRowDeleting;
            
            public event DesignProfileRowChangeEventHandler DesignProfileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDesignProfileRow(DesignProfileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DesignProfileRow AddDesignProfileRow(string DesignCode, string DesignName, string Scale, string DesignDate, string Address, string Zone, string Validate, string Employer, string Adviser, string Designer, string Controller, string Supporter, string Approval, string Planner) {
                DesignProfileRow rowDesignProfileRow = ((DesignProfileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DesignCode,
                        DesignName,
                        Scale,
                        DesignDate,
                        Address,
                        Zone,
                        Validate,
                        Employer,
                        Adviser,
                        Designer,
                        Controller,
                        Supporter,
                        Approval,
                        Planner};
                rowDesignProfileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDesignProfileRow);
                return rowDesignProfileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DesignProfileDataTable cln = ((DesignProfileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DesignProfileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDesignCode = base.Columns["DesignCode"];
                this.columnDesignName = base.Columns["DesignName"];
                this.columnScale = base.Columns["Scale"];
                this.columnDesignDate = base.Columns["DesignDate"];
                this.columnAddress = base.Columns["Address"];
                this.columnZone = base.Columns["Zone"];
                this.columnValidate = base.Columns["Validate"];
                this.columnEmployer = base.Columns["Employer"];
                this.columnAdviser = base.Columns["Adviser"];
                this.columnDesigner = base.Columns["Designer"];
                this.columnController = base.Columns["Controller"];
                this.columnSupporter = base.Columns["Supporter"];
                this.columnApproval = base.Columns["Approval"];
                this.columnPlanner = base.Columns["Planner"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDesignCode = new global::System.Data.DataColumn("DesignCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignCode);
                this.columnDesignName = new global::System.Data.DataColumn("DesignName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignName);
                this.columnScale = new global::System.Data.DataColumn("Scale", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScale);
                this.columnDesignDate = new global::System.Data.DataColumn("DesignDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignDate);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnZone = new global::System.Data.DataColumn("Zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZone);
                this.columnValidate = new global::System.Data.DataColumn("Validate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidate);
                this.columnEmployer = new global::System.Data.DataColumn("Employer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployer);
                this.columnAdviser = new global::System.Data.DataColumn("Adviser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdviser);
                this.columnDesigner = new global::System.Data.DataColumn("Designer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesigner);
                this.columnController = new global::System.Data.DataColumn("Controller", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnController);
                this.columnSupporter = new global::System.Data.DataColumn("Supporter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupporter);
                this.columnApproval = new global::System.Data.DataColumn("Approval", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApproval);
                this.columnPlanner = new global::System.Data.DataColumn("Planner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanner);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DesignProfileRow NewDesignProfileRow() {
                return ((DesignProfileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DesignProfileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DesignProfileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DesignProfileRowChanged != null)) {
                    this.DesignProfileRowChanged(this, new DesignProfileRowChangeEvent(((DesignProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DesignProfileRowChanging != null)) {
                    this.DesignProfileRowChanging(this, new DesignProfileRowChangeEvent(((DesignProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DesignProfileRowDeleted != null)) {
                    this.DesignProfileRowDeleted(this, new DesignProfileRowChangeEvent(((DesignProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DesignProfileRowDeleting != null)) {
                    this.DesignProfileRowDeleting(this, new DesignProfileRowChangeEvent(((DesignProfileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDesignProfileRow(DesignProfileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DesignProfileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GISForm1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPoleNum;
            
            private global::System.Data.DataColumn columnX;
            
            private global::System.Data.DataColumn columnY;
            
            private global::System.Data.DataColumn columnHigh;
            
            private global::System.Data.DataColumn columnTension;
            
            private global::System.Data.DataColumn columnKind;
            
            private global::System.Data.DataColumn columnPoleType;
            
            private global::System.Data.DataColumn columnOrderType;
            
            private global::System.Data.DataColumn columnInsulatorCount;
            
            private global::System.Data.DataColumn columnCircuitCount;
            
            private global::System.Data.DataColumn columnCrossSection;
            
            private global::System.Data.DataColumn columnBranchType;
            
            private global::System.Data.DataColumn columnProductType;
            
            private global::System.Data.DataColumn columnConstructor;
            
            private global::System.Data.DataColumn columnI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GISForm1DataTable() {
                this.TableName = "GISForm1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GISForm1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GISForm1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoleNumColumn {
                get {
                    return this.columnPoleNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HighColumn {
                get {
                    return this.columnHigh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TensionColumn {
                get {
                    return this.columnTension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KindColumn {
                get {
                    return this.columnKind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoleTypeColumn {
                get {
                    return this.columnPoleType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderTypeColumn {
                get {
                    return this.columnOrderType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsulatorCountColumn {
                get {
                    return this.columnInsulatorCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CircuitCountColumn {
                get {
                    return this.columnCircuitCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrossSectionColumn {
                get {
                    return this.columnCrossSection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchTypeColumn {
                get {
                    return this.columnBranchType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductTypeColumn {
                get {
                    return this.columnProductType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstructorColumn {
                get {
                    return this.columnConstructor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IColumn {
                get {
                    return this.columnI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GISForm1Row this[int index] {
                get {
                    return ((GISForm1Row)(this.Rows[index]));
                }
            }
            
            public event GISForm1RowChangeEventHandler GISForm1RowChanging;
            
            public event GISForm1RowChangeEventHandler GISForm1RowChanged;
            
            public event GISForm1RowChangeEventHandler GISForm1RowDeleting;
            
            public event GISForm1RowChangeEventHandler GISForm1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGISForm1Row(GISForm1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GISForm1Row AddGISForm1Row(string PoleNum, string X, string Y, string High, string Tension, string Kind, string PoleType, string OrderType, string InsulatorCount, string CircuitCount, string CrossSection, string BranchType, string ProductType, string Constructor, string I) {
                GISForm1Row rowGISForm1Row = ((GISForm1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PoleNum,
                        X,
                        Y,
                        High,
                        Tension,
                        Kind,
                        PoleType,
                        OrderType,
                        InsulatorCount,
                        CircuitCount,
                        CrossSection,
                        BranchType,
                        ProductType,
                        Constructor,
                        I};
                rowGISForm1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowGISForm1Row);
                return rowGISForm1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GISForm1DataTable cln = ((GISForm1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GISForm1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPoleNum = base.Columns["PoleNum"];
                this.columnX = base.Columns["X"];
                this.columnY = base.Columns["Y"];
                this.columnHigh = base.Columns["High"];
                this.columnTension = base.Columns["Tension"];
                this.columnKind = base.Columns["Kind"];
                this.columnPoleType = base.Columns["PoleType"];
                this.columnOrderType = base.Columns["OrderType"];
                this.columnInsulatorCount = base.Columns["InsulatorCount"];
                this.columnCircuitCount = base.Columns["CircuitCount"];
                this.columnCrossSection = base.Columns["CrossSection"];
                this.columnBranchType = base.Columns["BranchType"];
                this.columnProductType = base.Columns["ProductType"];
                this.columnConstructor = base.Columns["Constructor"];
                this.columnI = base.Columns["I"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPoleNum = new global::System.Data.DataColumn("PoleNum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoleNum);
                this.columnX = new global::System.Data.DataColumn("X", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnX);
                this.columnY = new global::System.Data.DataColumn("Y", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnY);
                this.columnHigh = new global::System.Data.DataColumn("High", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHigh);
                this.columnTension = new global::System.Data.DataColumn("Tension", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTension);
                this.columnKind = new global::System.Data.DataColumn("Kind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKind);
                this.columnPoleType = new global::System.Data.DataColumn("PoleType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoleType);
                this.columnOrderType = new global::System.Data.DataColumn("OrderType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderType);
                this.columnInsulatorCount = new global::System.Data.DataColumn("InsulatorCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsulatorCount);
                this.columnCircuitCount = new global::System.Data.DataColumn("CircuitCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCircuitCount);
                this.columnCrossSection = new global::System.Data.DataColumn("CrossSection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrossSection);
                this.columnBranchType = new global::System.Data.DataColumn("BranchType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchType);
                this.columnProductType = new global::System.Data.DataColumn("ProductType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductType);
                this.columnConstructor = new global::System.Data.DataColumn("Constructor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstructor);
                this.columnI = new global::System.Data.DataColumn("I", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnI);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GISForm1Row NewGISForm1Row() {
                return ((GISForm1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GISForm1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GISForm1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GISForm1RowChanged != null)) {
                    this.GISForm1RowChanged(this, new GISForm1RowChangeEvent(((GISForm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GISForm1RowChanging != null)) {
                    this.GISForm1RowChanging(this, new GISForm1RowChangeEvent(((GISForm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GISForm1RowDeleted != null)) {
                    this.GISForm1RowDeleted(this, new GISForm1RowChangeEvent(((GISForm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GISForm1RowDeleting != null)) {
                    this.GISForm1RowDeleting(this, new GISForm1RowChangeEvent(((GISForm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGISForm1Row(GISForm1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSagAndTension ds = new dsSagAndTension();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GISForm1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TitleRow : global::System.Data.DataRow {
            
            private TitleDataTable tableTitle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TitleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTitle = ((TitleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableTitle.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCount {
                get {
                    try {
                        return ((string)(this[this.tableTitle.SectionCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionCount\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.SectionCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoleCount {
                get {
                    try {
                        return ((string)(this[this.tableTitle.PoleCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoleCount\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.PoleCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableTitle.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Area {
                get {
                    try {
                        return ((string)(this[this.tableTitle.AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Area\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designer {
                get {
                    try {
                        return ((string)(this[this.tableTitle.DesignerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designer\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.DesignerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Credit {
                get {
                    try {
                        return ((string)(this[this.tableTitle.CreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Credit\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.CreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Logo {
                get {
                    try {
                        return ((byte[])(this[this.tableTitle.LogoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Logo\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.LogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogoName {
                get {
                    try {
                        return ((string)(this[this.tableTitle.LogoNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LogoName\' in table \'Title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTitle.LogoNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableTitle.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableTitle.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCountNull() {
                return this.IsNull(this.tableTitle.SectionCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCountNull() {
                this[this.tableTitle.SectionCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoleCountNull() {
                return this.IsNull(this.tableTitle.PoleCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoleCountNull() {
                this[this.tableTitle.PoleCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableTitle.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableTitle.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaNull() {
                return this.IsNull(this.tableTitle.AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaNull() {
                this[this.tableTitle.AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignerNull() {
                return this.IsNull(this.tableTitle.DesignerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignerNull() {
                this[this.tableTitle.DesignerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditNull() {
                return this.IsNull(this.tableTitle.CreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditNull() {
                this[this.tableTitle.CreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoNull() {
                return this.IsNull(this.tableTitle.LogoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoNull() {
                this[this.tableTitle.LogoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoNameNull() {
                return this.IsNull(this.tableTitle.LogoNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoNameNull() {
                this[this.tableTitle.LogoNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SagAndTensionRow : global::System.Data.DataRow {
            
            private SagAndTensionDataTable tableSagAndTension;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SagAndTensionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSagAndTension = ((SagAndTensionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionCode {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.SectionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionCode\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.SectionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartPole {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.StartPoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartPole\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.StartPoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndPole {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.EndPoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndPole\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.EndPoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormH {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.NormHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormH\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.NormHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NormF {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.NormFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormF\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.NormFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WindAndIceH {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.WindAndIceHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WindAndIceH\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.WindAndIceHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WindAndIceF {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.WindAndIceFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WindAndIceF\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.WindAndIceFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinTempH {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.MinTempHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTempH\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.MinTempHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinTempF {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.MinTempFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTempF\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.MinTempFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxTempH {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.MaxTempHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxTempH\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.MaxTempHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxTempF {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.MaxTempFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxTempF\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.MaxTempFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WindH {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.WindHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WindH\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.WindHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WindF {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.WindFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WindF\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.WindFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IceH {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.IceHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IceH\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.IceHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IceF {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.IceFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IceF\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.IceFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Span {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.SpanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Span\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.SpanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CondName {
                get {
                    try {
                        return ((string)(this[this.tableSagAndTension.CondNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CondName\' in table \'SagAndTension\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSagAndTension.CondNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionCodeNull() {
                return this.IsNull(this.tableSagAndTension.SectionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionCodeNull() {
                this[this.tableSagAndTension.SectionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartPoleNull() {
                return this.IsNull(this.tableSagAndTension.StartPoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartPoleNull() {
                this[this.tableSagAndTension.StartPoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndPoleNull() {
                return this.IsNull(this.tableSagAndTension.EndPoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndPoleNull() {
                this[this.tableSagAndTension.EndPoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormHNull() {
                return this.IsNull(this.tableSagAndTension.NormHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormHNull() {
                this[this.tableSagAndTension.NormHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormFNull() {
                return this.IsNull(this.tableSagAndTension.NormFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormFNull() {
                this[this.tableSagAndTension.NormFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindAndIceHNull() {
                return this.IsNull(this.tableSagAndTension.WindAndIceHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindAndIceHNull() {
                this[this.tableSagAndTension.WindAndIceHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindAndIceFNull() {
                return this.IsNull(this.tableSagAndTension.WindAndIceFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindAndIceFNull() {
                this[this.tableSagAndTension.WindAndIceFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTempHNull() {
                return this.IsNull(this.tableSagAndTension.MinTempHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTempHNull() {
                this[this.tableSagAndTension.MinTempHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTempFNull() {
                return this.IsNull(this.tableSagAndTension.MinTempFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTempFNull() {
                this[this.tableSagAndTension.MinTempFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxTempHNull() {
                return this.IsNull(this.tableSagAndTension.MaxTempHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxTempHNull() {
                this[this.tableSagAndTension.MaxTempHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxTempFNull() {
                return this.IsNull(this.tableSagAndTension.MaxTempFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxTempFNull() {
                this[this.tableSagAndTension.MaxTempFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindHNull() {
                return this.IsNull(this.tableSagAndTension.WindHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindHNull() {
                this[this.tableSagAndTension.WindHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindFNull() {
                return this.IsNull(this.tableSagAndTension.WindFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindFNull() {
                this[this.tableSagAndTension.WindFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIceHNull() {
                return this.IsNull(this.tableSagAndTension.IceHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIceHNull() {
                this[this.tableSagAndTension.IceHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIceFNull() {
                return this.IsNull(this.tableSagAndTension.IceFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIceFNull() {
                this[this.tableSagAndTension.IceFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSpanNull() {
                return this.IsNull(this.tableSagAndTension.SpanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSpanNull() {
                this[this.tableSagAndTension.SpanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCondNameNull() {
                return this.IsNull(this.tableSagAndTension.CondNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCondNameNull() {
                this[this.tableSagAndTension.CondNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PoleForceRow : global::System.Data.DataRow {
            
            private PoleForceDataTable tablePoleForce;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoleForceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoleForce = ((PoleForceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionNumber {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.SectionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionNumber\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.SectionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoleNumber {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.PoleNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoleNumber\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.PoleNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Normal {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.NormalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Normal\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.NormalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ice {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.IceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ice\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.IceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Wind {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.WindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Wind\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.WindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxTemp {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.MaxTempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxTemp\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.MaxTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinTemp {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.MinTempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTemp\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.MinTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IceWind {
                get {
                    try {
                        return ((string)(this[this.tablePoleForce.IceWindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IceWind\' in table \'PoleForce\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleForce.IceWindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tablePoleForce.SectionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNumberNull() {
                this[this.tablePoleForce.SectionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoleNumberNull() {
                return this.IsNull(this.tablePoleForce.PoleNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoleNumberNull() {
                this[this.tablePoleForce.PoleNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormalNull() {
                return this.IsNull(this.tablePoleForce.NormalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormalNull() {
                this[this.tablePoleForce.NormalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIceNull() {
                return this.IsNull(this.tablePoleForce.IceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIceNull() {
                this[this.tablePoleForce.IceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindNull() {
                return this.IsNull(this.tablePoleForce.WindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindNull() {
                this[this.tablePoleForce.WindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxTempNull() {
                return this.IsNull(this.tablePoleForce.MaxTempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxTempNull() {
                this[this.tablePoleForce.MaxTempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTempNull() {
                return this.IsNull(this.tablePoleForce.MinTempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTempNull() {
                this[this.tablePoleForce.MinTempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIceWindNull() {
                return this.IsNull(this.tablePoleForce.IceWindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIceWindNull() {
                this[this.tablePoleForce.IceWindColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NodeRow : global::System.Data.DataRow {
            
            private NodeDataTable tableNode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNode = ((NodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NodeName {
                get {
                    try {
                        return ((string)(this[this.tableNode.NodeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NodeName\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.NodeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VoltABS {
                get {
                    try {
                        return ((string)(this[this.tableNode.VoltABSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VoltABS\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.VoltABSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VoltArg {
                get {
                    try {
                        return ((string)(this[this.tableNode.VoltArgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VoltArg\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.VoltArgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DropVolt {
                get {
                    try {
                        return ((string)(this[this.tableNode.DropVoltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropVolt\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.DropVoltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadPowerActive {
                get {
                    try {
                        return ((string)(this[this.tableNode.LoadPowerActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadPowerActive\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.LoadPowerActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadPower {
                get {
                    try {
                        return ((string)(this[this.tableNode.LoadPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadPower\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.LoadPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadCurrnetABS {
                get {
                    try {
                        return ((string)(this[this.tableNode.LoadCurrnetABSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadCurrnetABS\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.LoadCurrnetABSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadCurrentArg {
                get {
                    try {
                        return ((string)(this[this.tableNode.LoadCurrentArgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadCurrentArg\' in table \'Node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNode.LoadCurrentArgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeNameNull() {
                return this.IsNull(this.tableNode.NodeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeNameNull() {
                this[this.tableNode.NodeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoltABSNull() {
                return this.IsNull(this.tableNode.VoltABSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoltABSNull() {
                this[this.tableNode.VoltABSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoltArgNull() {
                return this.IsNull(this.tableNode.VoltArgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoltArgNull() {
                this[this.tableNode.VoltArgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropVoltNull() {
                return this.IsNull(this.tableNode.DropVoltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropVoltNull() {
                this[this.tableNode.DropVoltColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadPowerActiveNull() {
                return this.IsNull(this.tableNode.LoadPowerActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadPowerActiveNull() {
                this[this.tableNode.LoadPowerActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadPowerNull() {
                return this.IsNull(this.tableNode.LoadPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadPowerNull() {
                this[this.tableNode.LoadPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadCurrnetABSNull() {
                return this.IsNull(this.tableNode.LoadCurrnetABSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadCurrnetABSNull() {
                this[this.tableNode.LoadCurrnetABSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadCurrentArgNull() {
                return this.IsNull(this.tableNode.LoadCurrentArgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadCurrentArgNull() {
                this[this.tableNode.LoadCurrentArgColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BranchRow : global::System.Data.DataRow {
            
            private BranchDataTable tableBranch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BranchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBranch = ((BranchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchName {
                get {
                    try {
                        return ((string)(this[this.tableBranch.BranchNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BranchName\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.BranchNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lenght {
                get {
                    try {
                        return ((string)(this[this.tableBranch.LenghtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lenght\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.LenghtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrnetABS {
                get {
                    try {
                        return ((string)(this[this.tableBranch.CurrnetABSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrnetABS\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.CurrnetABSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentArg {
                get {
                    try {
                        return ((string)(this[this.tableBranch.CurrentArgColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentArg\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.CurrentArgColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Condutilization {
                get {
                    try {
                        return ((string)(this[this.tableBranch.CondutilizationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Condutilization\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.CondutilizationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalLoad {
                get {
                    try {
                        return ((string)(this[this.tableBranch.TotalLoadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLoad\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.TotalLoadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableBranch.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Capacity {
                get {
                    try {
                        return ((string)(this[this.tableBranch.CapacityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Capacity\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.CapacityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Casualty {
                get {
                    try {
                        return ((string)(this[this.tableBranch.CasualtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Casualty\' in table \'Branch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBranch.CasualtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchNameNull() {
                return this.IsNull(this.tableBranch.BranchNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchNameNull() {
                this[this.tableBranch.BranchNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLenghtNull() {
                return this.IsNull(this.tableBranch.LenghtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLenghtNull() {
                this[this.tableBranch.LenghtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrnetABSNull() {
                return this.IsNull(this.tableBranch.CurrnetABSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrnetABSNull() {
                this[this.tableBranch.CurrnetABSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentArgNull() {
                return this.IsNull(this.tableBranch.CurrentArgColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentArgNull() {
                this[this.tableBranch.CurrentArgColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCondutilizationNull() {
                return this.IsNull(this.tableBranch.CondutilizationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCondutilizationNull() {
                this[this.tableBranch.CondutilizationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLoadNull() {
                return this.IsNull(this.tableBranch.TotalLoadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLoadNull() {
                this[this.tableBranch.TotalLoadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableBranch.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableBranch.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacityNull() {
                return this.IsNull(this.tableBranch.CapacityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapacityNull() {
                this[this.tableBranch.CapacityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCasualtyNull() {
                return this.IsNull(this.tableBranch.CasualtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCasualtyNull() {
                this[this.tableBranch.CasualtyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CrossSectionRow : global::System.Data.DataRow {
            
            private CrossSectionDataTable tableCrossSection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CrossSectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCrossSection = ((CrossSectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string From {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.FromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'From\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.FromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string To {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.ToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'To\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.ToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameExist {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.NameExistColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NameExist\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.NameExistColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lenght {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.LenghtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lenght\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.LenghtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NameComment {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.NameCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NameComment\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.NameCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CrossSection {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.CrossSectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CrossSection\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.CrossSectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Current {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.CurrentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Current\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.CurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Volt {
                get {
                    try {
                        return ((string)(this[this.tableCrossSection.VoltColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Volt\' in table \'CrossSection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCrossSection.VoltColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromNull() {
                return this.IsNull(this.tableCrossSection.FromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromNull() {
                this[this.tableCrossSection.FromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToNull() {
                return this.IsNull(this.tableCrossSection.ToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToNull() {
                this[this.tableCrossSection.ToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameExistNull() {
                return this.IsNull(this.tableCrossSection.NameExistColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameExistNull() {
                this[this.tableCrossSection.NameExistColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLenghtNull() {
                return this.IsNull(this.tableCrossSection.LenghtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLenghtNull() {
                this[this.tableCrossSection.LenghtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameCommentNull() {
                return this.IsNull(this.tableCrossSection.NameCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameCommentNull() {
                this[this.tableCrossSection.NameCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrossSectionNull() {
                return this.IsNull(this.tableCrossSection.CrossSectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrossSectionNull() {
                this[this.tableCrossSection.CrossSectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentNull() {
                return this.IsNull(this.tableCrossSection.CurrentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentNull() {
                this[this.tableCrossSection.CurrentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoltNull() {
                return this.IsNull(this.tableCrossSection.VoltColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoltNull() {
                this[this.tableCrossSection.VoltColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InputInfoTranseRow : global::System.Data.DataRow {
            
            private InputInfoTranseDataTable tableInputInfoTranse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InputInfoTranseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInputInfoTranse = ((InputInfoTranseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Height {
                get {
                    try {
                        return ((string)(this[this.tableInputInfoTranse.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'InputInfoTranse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInputInfoTranse.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Load {
                get {
                    try {
                        return ((string)(this[this.tableInputInfoTranse.LoadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Load\' in table \'InputInfoTranse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInputInfoTranse.LoadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Result {
                get {
                    try {
                        return ((string)(this[this.tableInputInfoTranse.ResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Result\' in table \'InputInfoTranse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInputInfoTranse.ResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PowerLoss {
                get {
                    try {
                        return ((string)(this[this.tableInputInfoTranse.PowerLossColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PowerLoss\' in table \'InputInfoTranse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInputInfoTranse.PowerLossColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableInputInfoTranse.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableInputInfoTranse.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadNull() {
                return this.IsNull(this.tableInputInfoTranse.LoadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadNull() {
                this[this.tableInputInfoTranse.LoadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultNull() {
                return this.IsNull(this.tableInputInfoTranse.ResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultNull() {
                this[this.tableInputInfoTranse.ResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPowerLossNull() {
                return this.IsNull(this.tableInputInfoTranse.PowerLossColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPowerLossNull() {
                this[this.tableInputInfoTranse.PowerLossColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LoadCurrentRow : global::System.Data.DataRow {
            
            private LoadCurrentDataTable tableLoadCurrent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadCurrentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoadCurrent = ((LoadCurrentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string I {
                get {
                    try {
                        return ((string)(this[this.tableLoadCurrent.IColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'I\' in table \'LoadCurrent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadCurrent.IColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PF {
                get {
                    try {
                        return ((string)(this[this.tableLoadCurrent.PFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF\' in table \'LoadCurrent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadCurrent.PFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Count {
                get {
                    try {
                        return ((string)(this[this.tableLoadCurrent.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'LoadCurrent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadCurrent.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CF {
                get {
                    try {
                        return ((string)(this[this.tableLoadCurrent.CFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CF\' in table \'LoadCurrent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadCurrent.CFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINull() {
                return this.IsNull(this.tableLoadCurrent.IColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINull() {
                this[this.tableLoadCurrent.IColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFNull() {
                return this.IsNull(this.tableLoadCurrent.PFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFNull() {
                this[this.tableLoadCurrent.PFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tableLoadCurrent.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tableLoadCurrent.CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCFNull() {
                return this.IsNull(this.tableLoadCurrent.CFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCFNull() {
                this[this.tableLoadCurrent.CFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LoadPowerRow : global::System.Data.DataRow {
            
            private LoadPowerDataTable tableLoadPower;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadPowerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoadPower = ((LoadPowerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P {
                get {
                    try {
                        return ((string)(this[this.tableLoadPower.PColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P\' in table \'LoadPower\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadPower.PColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PF {
                get {
                    try {
                        return ((string)(this[this.tableLoadPower.PFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF\' in table \'LoadPower\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadPower.PFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Count {
                get {
                    try {
                        return ((string)(this[this.tableLoadPower.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'LoadPower\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadPower.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CF {
                get {
                    try {
                        return ((string)(this[this.tableLoadPower.CFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CF\' in table \'LoadPower\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadPower.CFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPNull() {
                return this.IsNull(this.tableLoadPower.PColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPNull() {
                this[this.tableLoadPower.PColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFNull() {
                return this.IsNull(this.tableLoadPower.PFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFNull() {
                this[this.tableLoadPower.PFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tableLoadPower.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tableLoadPower.CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCFNull() {
                return this.IsNull(this.tableLoadPower.CFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCFNull() {
                this[this.tableLoadPower.CFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LoadBranchRow : global::System.Data.DataRow {
            
            private LoadBranchDataTable tableLoadBranch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadBranchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoadBranch = ((LoadBranchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchName {
                get {
                    try {
                        return ((string)(this[this.tableLoadBranch.BranchNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BranchName\' in table \'LoadBranch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadBranch.BranchNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string I {
                get {
                    try {
                        return ((string)(this[this.tableLoadBranch.IColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'I\' in table \'LoadBranch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadBranch.IColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PF {
                get {
                    try {
                        return ((string)(this[this.tableLoadBranch.PFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF\' in table \'LoadBranch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadBranch.PFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchCount {
                get {
                    try {
                        return ((string)(this[this.tableLoadBranch.BranchCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BranchCount\' in table \'LoadBranch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadBranch.BranchCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhuseCount {
                get {
                    try {
                        return ((string)(this[this.tableLoadBranch.PhuseCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhuseCount\' in table \'LoadBranch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadBranch.PhuseCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CF {
                get {
                    try {
                        return ((string)(this[this.tableLoadBranch.CFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CF\' in table \'LoadBranch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadBranch.CFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchNameNull() {
                return this.IsNull(this.tableLoadBranch.BranchNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchNameNull() {
                this[this.tableLoadBranch.BranchNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINull() {
                return this.IsNull(this.tableLoadBranch.IColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINull() {
                this[this.tableLoadBranch.IColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFNull() {
                return this.IsNull(this.tableLoadBranch.PFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFNull() {
                this[this.tableLoadBranch.PFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchCountNull() {
                return this.IsNull(this.tableLoadBranch.BranchCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchCountNull() {
                this[this.tableLoadBranch.BranchCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhuseCountNull() {
                return this.IsNull(this.tableLoadBranch.PhuseCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhuseCountNull() {
                this[this.tableLoadBranch.PhuseCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCFNull() {
                return this.IsNull(this.tableLoadBranch.CFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCFNull() {
                this[this.tableLoadBranch.CFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RemarkRow : global::System.Data.DataRow {
            
            private RemarkDataTable tableRemark;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RemarkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRemark = ((RemarkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] File {
                get {
                    try {
                        return ((byte[])(this[this.tableRemark.FileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'File\' in table \'Remark\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRemark.FileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileNull() {
                return this.IsNull(this.tableRemark.FileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileNull() {
                this[this.tableRemark.FileColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RudSurfaceRow : global::System.Data.DataRow {
            
            private RudSurfaceDataTable tableRudSurface;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RudSurfaceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRudSurface = ((RudSurfaceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionNumber {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.SectionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionNumber\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.SectionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoleNumber {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.PoleNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoleNumber\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.PoleNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Normal {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.NormalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Normal\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.NormalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Ice {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.IceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ice\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.IceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Wind {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.WindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Wind\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.WindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxTemp {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.MaxTempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxTemp\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.MaxTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinTemp {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.MinTempColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinTemp\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.MinTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IceWind {
                get {
                    try {
                        return ((string)(this[this.tableRudSurface.IceWindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IceWind\' in table \'RudSurface\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRudSurface.IceWindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tableRudSurface.SectionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNumberNull() {
                this[this.tableRudSurface.SectionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoleNumberNull() {
                return this.IsNull(this.tableRudSurface.PoleNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoleNumberNull() {
                this[this.tableRudSurface.PoleNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormalNull() {
                return this.IsNull(this.tableRudSurface.NormalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNormalNull() {
                this[this.tableRudSurface.NormalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIceNull() {
                return this.IsNull(this.tableRudSurface.IceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIceNull() {
                this[this.tableRudSurface.IceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindNull() {
                return this.IsNull(this.tableRudSurface.WindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindNull() {
                this[this.tableRudSurface.WindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxTempNull() {
                return this.IsNull(this.tableRudSurface.MaxTempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxTempNull() {
                this[this.tableRudSurface.MaxTempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinTempNull() {
                return this.IsNull(this.tableRudSurface.MinTempColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinTempNull() {
                this[this.tableRudSurface.MinTempColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIceWindNull() {
                return this.IsNull(this.tableRudSurface.IceWindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIceWindNull() {
                this[this.tableRudSurface.IceWindColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PoleWithHalterRow : global::System.Data.DataRow {
            
            private PoleWithHalterDataTable tablePoleWithHalter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoleWithHalterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoleWithHalter = ((PoleWithHalterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionNumber {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithHalter.SectionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionNumber\' in table \'PoleWithHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithHalter.SectionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoleNum {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithHalter.PoleNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoleNum\' in table \'PoleWithHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithHalter.PoleNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Power {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithHalter.PowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Power\' in table \'PoleWithHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithHalter.PowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Count {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithHalter.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'PoleWithHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithHalter.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithHalter.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'PoleWithHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithHalter.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HalterPower {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithHalter.HalterPowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HalterPower\' in table \'PoleWithHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithHalter.HalterPowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HalterCount {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithHalter.HalterCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HalterCount\' in table \'PoleWithHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithHalter.HalterCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tablePoleWithHalter.SectionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNumberNull() {
                this[this.tablePoleWithHalter.SectionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoleNumNull() {
                return this.IsNull(this.tablePoleWithHalter.PoleNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoleNumNull() {
                this[this.tablePoleWithHalter.PoleNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPowerNull() {
                return this.IsNull(this.tablePoleWithHalter.PowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPowerNull() {
                this[this.tablePoleWithHalter.PowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tablePoleWithHalter.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tablePoleWithHalter.CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablePoleWithHalter.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablePoleWithHalter.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHalterPowerNull() {
                return this.IsNull(this.tablePoleWithHalter.HalterPowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHalterPowerNull() {
                this[this.tablePoleWithHalter.HalterPowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHalterCountNull() {
                return this.IsNull(this.tablePoleWithHalter.HalterCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHalterCountNull() {
                this[this.tablePoleWithHalter.HalterCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PoleWithOutHalterRow : global::System.Data.DataRow {
            
            private PoleWithOutHalterDataTable tablePoleWithOutHalter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PoleWithOutHalterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePoleWithOutHalter = ((PoleWithOutHalterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionNumber {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithOutHalter.SectionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionNumber\' in table \'PoleWithOutHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithOutHalter.SectionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoleNum {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithOutHalter.PoleNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoleNum\' in table \'PoleWithOutHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithOutHalter.PoleNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Power {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithOutHalter.PowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Power\' in table \'PoleWithOutHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithOutHalter.PowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Count {
                get {
                    try {
                        return ((string)(this[this.tablePoleWithOutHalter.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'PoleWithOutHalter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePoleWithOutHalter.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNumberNull() {
                return this.IsNull(this.tablePoleWithOutHalter.SectionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNumberNull() {
                this[this.tablePoleWithOutHalter.SectionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoleNumNull() {
                return this.IsNull(this.tablePoleWithOutHalter.PoleNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoleNumNull() {
                this[this.tablePoleWithOutHalter.PoleNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPowerNull() {
                return this.IsNull(this.tablePoleWithOutHalter.PowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPowerNull() {
                this[this.tablePoleWithOutHalter.PowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tablePoleWithOutHalter.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tablePoleWithOutHalter.CountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StatusReportRow : global::System.Data.DataRow {
            
            private StatusReportDataTable tableStatusReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatusReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStatusReport = ((StatusReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Code\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Count {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Price {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.PriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Price\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.PriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecutePrice {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.ExecutePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutePrice\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.ExecutePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WagePrice {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.WagePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WagePrice\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.WagePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Exist {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.ExistColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exist\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.ExistColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectCode {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.ProjectCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectCode\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.ProjectCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long Total {
                get {
                    try {
                        return ((long)(this[this.tableStatusReport.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AreaCoeff {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.AreaCoeffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaCoeff\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.AreaCoeffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sum {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.SumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sum\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.SumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName1 {
                get {
                    try {
                        return ((string)(this[this.tableStatusReport.ProjectName1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName1\' in table \'StatusReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatusReport.ProjectName1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableStatusReport.CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableStatusReport.CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableStatusReport.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableStatusReport.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tableStatusReport.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tableStatusReport.CountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableStatusReport.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableStatusReport.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableStatusReport.PriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableStatusReport.PriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutePriceNull() {
                return this.IsNull(this.tableStatusReport.ExecutePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutePriceNull() {
                this[this.tableStatusReport.ExecutePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWagePriceNull() {
                return this.IsNull(this.tableStatusReport.WagePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWagePriceNull() {
                this[this.tableStatusReport.WagePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExistNull() {
                return this.IsNull(this.tableStatusReport.ExistColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExistNull() {
                this[this.tableStatusReport.ExistColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectCodeNull() {
                return this.IsNull(this.tableStatusReport.ProjectCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectCodeNull() {
                this[this.tableStatusReport.ProjectCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableStatusReport.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableStatusReport.TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaCoeffNull() {
                return this.IsNull(this.tableStatusReport.AreaCoeffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaCoeffNull() {
                this[this.tableStatusReport.AreaCoeffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumNull() {
                return this.IsNull(this.tableStatusReport.SumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumNull() {
                this[this.tableStatusReport.SumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectName1Null() {
                return this.IsNull(this.tableStatusReport.ProjectName1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectName1Null() {
                this[this.tableStatusReport.ProjectName1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AirPostDiagramRow : global::System.Data.DataRow {
            
            private AirPostDiagramDataTable tableAirPostDiagram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AirPostDiagramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAirPostDiagram = ((AirPostDiagramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAirPostDiagram.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'AirPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAirPostDiagram.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Image {
                get {
                    try {
                        return ((byte[])(this[this.tableAirPostDiagram.ImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Image\' in table \'AirPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAirPostDiagram.ImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Capacity {
                get {
                    try {
                        return ((double)(this[this.tableAirPostDiagram.CapacityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Capacity\' in table \'AirPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAirPostDiagram.CapacityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XCode {
                get {
                    try {
                        return ((string)(this[this.tableAirPostDiagram.XCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XCode\' in table \'AirPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAirPostDiagram.XCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableAirPostDiagram.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableAirPostDiagram.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageNull() {
                return this.IsNull(this.tableAirPostDiagram.ImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageNull() {
                this[this.tableAirPostDiagram.ImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacityNull() {
                return this.IsNull(this.tableAirPostDiagram.CapacityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapacityNull() {
                this[this.tableAirPostDiagram.CapacityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXCodeNull() {
                return this.IsNull(this.tableAirPostDiagram.XCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXCodeNull() {
                this[this.tableAirPostDiagram.XCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroundPostDiagramRow : global::System.Data.DataRow {
            
            private GroundPostDiagramDataTable tableGroundPostDiagram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroundPostDiagramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroundPostDiagram = ((GroundPostDiagramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableGroundPostDiagram.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'GroundPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroundPostDiagram.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Image {
                get {
                    try {
                        return ((byte[])(this[this.tableGroundPostDiagram.ImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Image\' in table \'GroundPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroundPostDiagram.ImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Capacity {
                get {
                    try {
                        return ((double)(this[this.tableGroundPostDiagram.CapacityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Capacity\' in table \'GroundPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroundPostDiagram.CapacityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XCode {
                get {
                    try {
                        return ((string)(this[this.tableGroundPostDiagram.XCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XCode\' in table \'GroundPostDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroundPostDiagram.XCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableGroundPostDiagram.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableGroundPostDiagram.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageNull() {
                return this.IsNull(this.tableGroundPostDiagram.ImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageNull() {
                this[this.tableGroundPostDiagram.ImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacityNull() {
                return this.IsNull(this.tableGroundPostDiagram.CapacityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapacityNull() {
                this[this.tableGroundPostDiagram.CapacityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXCodeNull() {
                return this.IsNull(this.tableGroundPostDiagram.XCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXCodeNull() {
                this[this.tableGroundPostDiagram.XCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConsolDiagramRow : global::System.Data.DataRow {
            
            private ConsolDiagramDataTable tableConsolDiagram;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsolDiagramRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsolDiagram = ((ConsolDiagramDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableConsolDiagram.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'ConsolDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsolDiagram.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Image {
                get {
                    try {
                        return ((byte[])(this[this.tableConsolDiagram.ImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Image\' in table \'ConsolDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsolDiagram.ImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XCode {
                get {
                    try {
                        return ((string)(this[this.tableConsolDiagram.XCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XCode\' in table \'ConsolDiagram\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsolDiagram.XCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableConsolDiagram.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableConsolDiagram.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageNull() {
                return this.IsNull(this.tableConsolDiagram.ImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageNull() {
                this[this.tableConsolDiagram.ImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXCodeNull() {
                return this.IsNull(this.tableConsolDiagram.XCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXCodeNull() {
                this[this.tableConsolDiagram.XCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContentRow : global::System.Data.DataRow {
            
            private ContentDataTable tableContent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContent = ((ContentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableContent.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Content\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContent.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Page {
                get {
                    try {
                        return ((string)(this[this.tableContent.PageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Page\' in table \'Content\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContent.PageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookMark {
                get {
                    try {
                        return ((string)(this[this.tableContent.BookMarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BookMark\' in table \'Content\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContent.BookMarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableContent.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableContent.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageNull() {
                return this.IsNull(this.tableContent.PageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageNull() {
                this[this.tableContent.PageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookMarkNull() {
                return this.IsNull(this.tableContent.BookMarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookMarkNull() {
                this[this.tableContent.BookMarkColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DesignProfileRow : global::System.Data.DataRow {
            
            private DesignProfileDataTable tableDesignProfile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DesignProfileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDesignProfile = ((DesignProfileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DesignCode {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.DesignCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DesignCode\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.DesignCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DesignName {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.DesignNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DesignName\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.DesignNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Scale {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.ScaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scale\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.ScaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DesignDate {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.DesignDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DesignDate\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.DesignDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zone {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.ZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zone\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.ZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Validate {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.ValidateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Validate\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.ValidateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Employer {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.EmployerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Employer\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.EmployerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adviser {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.AdviserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adviser\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.AdviserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designer {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.DesignerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designer\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.DesignerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Controller {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.ControllerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Controller\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.ControllerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Supporter {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.SupporterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Supporter\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.SupporterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Approval {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.ApprovalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Approval\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.ApprovalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Planner {
                get {
                    try {
                        return ((string)(this[this.tableDesignProfile.PlannerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Planner\' in table \'DesignProfile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDesignProfile.PlannerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignCodeNull() {
                return this.IsNull(this.tableDesignProfile.DesignCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignCodeNull() {
                this[this.tableDesignProfile.DesignCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignNameNull() {
                return this.IsNull(this.tableDesignProfile.DesignNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignNameNull() {
                this[this.tableDesignProfile.DesignNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaleNull() {
                return this.IsNull(this.tableDesignProfile.ScaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaleNull() {
                this[this.tableDesignProfile.ScaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignDateNull() {
                return this.IsNull(this.tableDesignProfile.DesignDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignDateNull() {
                this[this.tableDesignProfile.DesignDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableDesignProfile.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableDesignProfile.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneNull() {
                return this.IsNull(this.tableDesignProfile.ZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneNull() {
                this[this.tableDesignProfile.ZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidateNull() {
                return this.IsNull(this.tableDesignProfile.ValidateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidateNull() {
                this[this.tableDesignProfile.ValidateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployerNull() {
                return this.IsNull(this.tableDesignProfile.EmployerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployerNull() {
                this[this.tableDesignProfile.EmployerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdviserNull() {
                return this.IsNull(this.tableDesignProfile.AdviserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdviserNull() {
                this[this.tableDesignProfile.AdviserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignerNull() {
                return this.IsNull(this.tableDesignProfile.DesignerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignerNull() {
                this[this.tableDesignProfile.DesignerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsControllerNull() {
                return this.IsNull(this.tableDesignProfile.ControllerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetControllerNull() {
                this[this.tableDesignProfile.ControllerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupporterNull() {
                return this.IsNull(this.tableDesignProfile.SupporterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupporterNull() {
                this[this.tableDesignProfile.SupporterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovalNull() {
                return this.IsNull(this.tableDesignProfile.ApprovalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovalNull() {
                this[this.tableDesignProfile.ApprovalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlannerNull() {
                return this.IsNull(this.tableDesignProfile.PlannerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlannerNull() {
                this[this.tableDesignProfile.PlannerColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GISForm1Row : global::System.Data.DataRow {
            
            private GISForm1DataTable tableGISForm1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GISForm1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGISForm1 = ((GISForm1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoleNum {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.PoleNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoleNum\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.PoleNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string X {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.XColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'X\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.XColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Y {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.YColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Y\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.YColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string High {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.HighColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'High\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.HighColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tension {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.TensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tension\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.TensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Kind {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.KindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Kind\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.KindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoleType {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.PoleTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoleType\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.PoleTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderType {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.OrderTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderType\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.OrderTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsulatorCount {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.InsulatorCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsulatorCount\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.InsulatorCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CircuitCount {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.CircuitCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CircuitCount\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.CircuitCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CrossSection {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.CrossSectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CrossSection\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.CrossSectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchType {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.BranchTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BranchType\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.BranchTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductType {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.ProductTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProductType\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.ProductTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Constructor {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.ConstructorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Constructor\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.ConstructorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string I {
                get {
                    try {
                        return ((string)(this[this.tableGISForm1.IColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'I\' in table \'GISForm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGISForm1.IColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoleNumNull() {
                return this.IsNull(this.tableGISForm1.PoleNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoleNumNull() {
                this[this.tableGISForm1.PoleNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXNull() {
                return this.IsNull(this.tableGISForm1.XColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXNull() {
                this[this.tableGISForm1.XColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYNull() {
                return this.IsNull(this.tableGISForm1.YColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYNull() {
                this[this.tableGISForm1.YColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHighNull() {
                return this.IsNull(this.tableGISForm1.HighColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHighNull() {
                this[this.tableGISForm1.HighColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTensionNull() {
                return this.IsNull(this.tableGISForm1.TensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTensionNull() {
                this[this.tableGISForm1.TensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKindNull() {
                return this.IsNull(this.tableGISForm1.KindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKindNull() {
                this[this.tableGISForm1.KindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoleTypeNull() {
                return this.IsNull(this.tableGISForm1.PoleTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoleTypeNull() {
                this[this.tableGISForm1.PoleTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderTypeNull() {
                return this.IsNull(this.tableGISForm1.OrderTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderTypeNull() {
                this[this.tableGISForm1.OrderTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsulatorCountNull() {
                return this.IsNull(this.tableGISForm1.InsulatorCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsulatorCountNull() {
                this[this.tableGISForm1.InsulatorCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCircuitCountNull() {
                return this.IsNull(this.tableGISForm1.CircuitCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCircuitCountNull() {
                this[this.tableGISForm1.CircuitCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrossSectionNull() {
                return this.IsNull(this.tableGISForm1.CrossSectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrossSectionNull() {
                this[this.tableGISForm1.CrossSectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBranchTypeNull() {
                return this.IsNull(this.tableGISForm1.BranchTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBranchTypeNull() {
                this[this.tableGISForm1.BranchTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductTypeNull() {
                return this.IsNull(this.tableGISForm1.ProductTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductTypeNull() {
                this[this.tableGISForm1.ProductTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConstructorNull() {
                return this.IsNull(this.tableGISForm1.ConstructorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConstructorNull() {
                this[this.tableGISForm1.ConstructorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINull() {
                return this.IsNull(this.tableGISForm1.IColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINull() {
                this[this.tableGISForm1.IColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TitleRowChangeEvent : global::System.EventArgs {
            
            private TitleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TitleRowChangeEvent(TitleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TitleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SagAndTensionRowChangeEvent : global::System.EventArgs {
            
            private SagAndTensionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SagAndTensionRowChangeEvent(SagAndTensionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SagAndTensionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PoleForceRowChangeEvent : global::System.EventArgs {
            
            private PoleForceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleForceRowChangeEvent(PoleForceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleForceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NodeRowChangeEvent : global::System.EventArgs {
            
            private NodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NodeRowChangeEvent(NodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BranchRowChangeEvent : global::System.EventArgs {
            
            private BranchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRowChangeEvent(BranchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CrossSectionRowChangeEvent : global::System.EventArgs {
            
            private CrossSectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrossSectionRowChangeEvent(CrossSectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CrossSectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InputInfoTranseRowChangeEvent : global::System.EventArgs {
            
            private InputInfoTranseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InputInfoTranseRowChangeEvent(InputInfoTranseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InputInfoTranseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LoadCurrentRowChangeEvent : global::System.EventArgs {
            
            private LoadCurrentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadCurrentRowChangeEvent(LoadCurrentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadCurrentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LoadPowerRowChangeEvent : global::System.EventArgs {
            
            private LoadPowerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadPowerRowChangeEvent(LoadPowerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadPowerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LoadBranchRowChangeEvent : global::System.EventArgs {
            
            private LoadBranchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadBranchRowChangeEvent(LoadBranchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadBranchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RemarkRowChangeEvent : global::System.EventArgs {
            
            private RemarkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemarkRowChangeEvent(RemarkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RemarkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RudSurfaceRowChangeEvent : global::System.EventArgs {
            
            private RudSurfaceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RudSurfaceRowChangeEvent(RudSurfaceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RudSurfaceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PoleWithHalterRowChangeEvent : global::System.EventArgs {
            
            private PoleWithHalterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithHalterRowChangeEvent(PoleWithHalterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithHalterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PoleWithOutHalterRowChangeEvent : global::System.EventArgs {
            
            private PoleWithOutHalterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithOutHalterRowChangeEvent(PoleWithOutHalterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PoleWithOutHalterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StatusReportRowChangeEvent : global::System.EventArgs {
            
            private StatusReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusReportRowChangeEvent(StatusReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatusReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AirPostDiagramRowChangeEvent : global::System.EventArgs {
            
            private AirPostDiagramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AirPostDiagramRowChangeEvent(AirPostDiagramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AirPostDiagramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroundPostDiagramRowChangeEvent : global::System.EventArgs {
            
            private GroundPostDiagramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroundPostDiagramRowChangeEvent(GroundPostDiagramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroundPostDiagramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConsolDiagramRowChangeEvent : global::System.EventArgs {
            
            private ConsolDiagramRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsolDiagramRowChangeEvent(ConsolDiagramRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsolDiagramRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContentRowChangeEvent : global::System.EventArgs {
            
            private ContentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentRowChangeEvent(ContentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DesignProfileRowChangeEvent : global::System.EventArgs {
            
            private DesignProfileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DesignProfileRowChangeEvent(DesignProfileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DesignProfileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GISForm1RowChangeEvent : global::System.EventArgs {
            
            private GISForm1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GISForm1RowChangeEvent(GISForm1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GISForm1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591